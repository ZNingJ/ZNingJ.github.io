<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络知识点整理（二）</title>
      <link href="/2020/12/22/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li-er/"/>
      <url>/2020/12/22/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li-er/</url>
      
        <content type="html"><![CDATA[<p><b><span style="color:#FF4500;">写在最前面：本文章所有内容是本人从网络以及《计算机网路第七版》整理而得，若有错误请联系我。</span></b></p><p><b><span style="color:#FF4500">另一部分参见：</span></b><a href="https://0.0.7.228/12/21/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li-yi/">计算机网络面试常考总结（一）</a></p><p><strong>DNS：</strong>Domain Name System，域名系统，是互联网使用的命名系统，用来便于把人们使用的机器名字转换为IP地址。</p><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626677436_5d3a5c6a9457872609.png" alt="5d3a5c6a9457872609">如上图，m.xyz.com需要查找y.abc.com的IP地址：</p><blockquote><ul><li><p>主机m.xyz.com向本地域名服务器进行递归查询。</p><blockquote><p>主机向本地域名服务器查询时一般使用递归查询。</p><ul><li><strong>递归查询</strong>：就是如果本地域名服务器没有所需域名的IP地址，本地域名服务器就以客户的方式向其他根域名服务器继续查询，而不是主机自己进行查询。</li></ul><p>本地域名服务器向其他根域名服务器进行查询的时一般使用迭代查询。</p><ul><li><strong>迭代查询：</strong> 当某个根域名服务器收到本地域名服务器的请求报文时，要么告诉它所需域名的IP地址，要么告诉它下一步应该向哪个服务器发起询问。然后让本地域名服务器自己去查询。</li></ul></blockquote></li><li><p>本地域名服务器迭代查询，先向一个根域名服务器查询。</p></li><li><p>根域名服务器告诉本地域名服务器，下一步应该向顶级域名服务器dns.com查询。</p></li><li><p>顶级域名服务器dns.com告诉本地域名服务器，下一步查找权限域名服务器：dns.adc.com。</p></li><li><p>本地域名服务器向权限域名服务器发起查询。权限域名服务器告诉本地服务器所需的IP地址，本地服务器在告诉给本地主机。</p></li></ul></blockquote><h4 id="补充——域名服务器的分类："><a href="#补充——域名服务器的分类：" class="headerlink" title="补充——域名服务器的分类："></a>补充——域名服务器的分类：</h4><blockquote><ul><li><strong>根域名服务器：</strong> 最高层也是最重要的域名服务器，<strong>所有的根域名服务器都知道所有的顶级域名服务器的域名地址和IP地址</strong>。例如：a.rootserver.net。</li><li><strong>顶级域名服务器：</strong> 这些域名服务器负责管理在该顶级域名服务器上注册的所有的二级域名。例如：com</li><li><strong>权限域名服务器：</strong> 负责一个区的域名服务器，如果当前权限域名服务器不能给出所需的IP地址，则返回客户应该找哪一个权限服务器。</li><li><strong>本地域名服务器：</strong> 本地DNS一般是指你电脑上网时IPv4或者IPv6设置中填写的那个DNS。这个有可能是手工指定的或者是DHCP自动分配的。当一台主机发送DNS请求报文时，这个查询报文就发送给本地域名服务器。</li></ul></blockquote><hr><h3 id="简述HTTP协议以及一次HTTP操作的。"><a href="#简述HTTP协议以及一次HTTP操作的。" class="headerlink" title="简述HTTP协议以及一次HTTP操作的。"></a>简述HTTP协议以及一次HTTP操作的。</h3><p><strong>HTTP 是面向事务的(transaction-oriented)应用层协议，它是万维网上能够可靠地交换文件（包括文本、声音、图像等各种多媒体文件）的重要基础。</strong></p><ul><li>HTTP 是面向事务的客户服务器协议。</li><li>HTTP 1.0 协议是无状态的(stateless)。</li><li>HTTP 协议本身也是无连接的，虽然它使用了面向连接的 TCP 向上提供的服务。</li></ul><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626659403_5d3e522382fd145179.png" alt="5d3e522382fd145179"></p><p><strong>一次HTTP操作的过程：</strong></p><blockquote><ul><li>浏览器分析超链指向页面的 URL。</li><li>浏览器向 DNS 请求解析 <a href="http://www.tsinghua.edu.cn/">www.tsinghua.edu.cn</a> 的 IP 地址。</li><li>域名系统 DNS 解析出清华大学服务器的 IP 地址。</li><li>浏览器与服务器建立 TCP 连接</li><li>浏览器发出取文件命令：GET /chn/yxsz/index.htm。</li><li>服务器给出响应，把文件 index.htm 发给浏览器。</li><li>TCP 连接释放。</li><li>浏览器显示“清华大学院系设置”文件 index.htm 中的所有文本。</li></ul></blockquote><hr><h3 id="HTTP报文的格式？"><a href="#HTTP报文的格式？" class="headerlink" title="HTTP报文的格式？"></a>HTTP报文的格式？</h3><p><strong>HTTP报文分为两类：请求报文和响应报文。它们都由三部分组成：开始行、首部行、实体主体。区别就是开始行不同。</strong></p><p><img src="https://i.loli.net/2019/07/29/5d3e5c39f101f64538.png" alt="5d3e5c39f101f64538"></p><ul><li><p><strong>首部行：</strong> 用来说明服务器、浏览器、或报文主体的一些信息。</p></li><li><p><strong>实体主体：</strong> 一般不用。</p></li><li><p><strong>开始行：</strong>对于请求报文来说，就是请求行。对于响应报文来说，就是状态行。</p><blockquote><p><strong>请求行：</strong> 包括三个内容：方法，URL以及HTTP的版本。后面有关于方法的详解。</p><p><strong>状态行：</strong> 包括三个内容：HTTP版本、状态码以及状态码的简单短语。后面有关于状态码的详解。</p></blockquote></li></ul><hr><h3 id="HTTP请求报文中的方法有哪些？"><a href="#HTTP请求报文中的方法有哪些？" class="headerlink" title="HTTP请求报文中的方法有哪些？"></a>HTTP请求报文中的方法有哪些？</h3><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626659330_5d3e537d38ae253055.png" alt="5d3e537d38ae253055"></p><hr><h3 id="get与post的区别。"><a href="#get与post的区别。" class="headerlink" title="get与post的区别。"></a>get与post的区别。</h3><p><a href="https://www.w3school.com.cn/tags/html_ref_httpmethods.asp">原博文——get与post的区别-1</a></p><p><a href="https://www.zhihu.com/question/28586791">原博文——get与post的区别-2</a></p><table><thead><tr><th></th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>后退按钮/刷新</td><td>无害</td><td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td>书签</td><td>可收藏为书签</td><td>不可收藏为书签</td></tr><tr><td>缓存</td><td>能被缓存</td><td>不能缓存</td></tr><tr><td>编码类型</td><td>application/x-www-form-urlencoded</td><td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td>历史</td><td>参数保留在浏览器历史中。</td><td>参数不会保存在浏览器历史中。</td></tr><tr><td>对数据长度的限制</td><td>是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td>无限制。</td></tr><tr><td>对数据类型的限制</td><td>只允许 ASCII 字符。</td><td>没有限制。也允许二进制数据。</td></tr><tr><td>安全性</td><td>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！</td><td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td>可见性</td><td>数据在 URL 中对所有人都是可见的。</td><td>数据不会显示在 URL 中。</td></tr></tbody></table><blockquote><p>get方法一般用于请求获取信息，post方法一般用于向服务器提交一些修改信息。比如，我们输入一个网页地址，我们使用get方法获取页面的信息。如果我们要在某个网站上购买一件商品，我们使用post方法提交一个表单，服务器就记录下了你要购买的商品。基于这样的场景，可以得出：</p><ul><li>get方法请求的内容可以添加为标签并且能被缓存，post则不能添加为标签和被缓存（因为post请求的内容如果能添加为标签和被缓存的话，你下次点击这个标签就会直接购买商品了，很不安全）。</li><li>刷新的时候，get方法可以重新请求，无害，但是post的方法会重新提交表单（服务器这时候会告知用户），有隐患。</li></ul><p>此外，get的方法携带的数据一般放在url的后面，post方法携带的数据一般在http报文里面。因此，由于浏览器的限制，get携带的数据长度一般是有限制的，而post方法则无限制。</p></blockquote><hr><h3 id="HTTP1-0、HTTP1-1和HTTP2-0的区别？"><a href="#HTTP1-0、HTTP1-1和HTTP2-0的区别？" class="headerlink" title="HTTP1.0、HTTP1.1和HTTP2.0的区别？"></a>HTTP1.0、HTTP1.1和HTTP2.0的区别？</h3><p><a href="https://www.cnblogs.com/heluan/p/8620312.html">原博文——HTTP各版本之间的区别</a></p><p><strong>HTTP1.0与HTTP1.1区别：</strong></p><blockquote><p>HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。 主要区别主要体现在：</p><ul><li><strong>缓存处理</strong>，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</li><li><strong>带宽优化及网络连接的使用</strong>，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li><strong>错误通知的管理</strong>，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</li><li><strong>Host头处理</strong>，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</li><li><strong>长连接、持续连接</strong>，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</li></ul></blockquote><p><strong>HTTP1.1与HTTP2.0的区别：</strong></p><blockquote><ul><li><strong>新的二进制格式</strong>（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</li><li><strong>多路复用</strong>（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</li><li><strong>header压缩</strong>，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</li><li><strong>服务端推送</strong>（server push），同SPDY一样，HTTP2.0也具有server push功能</li></ul></blockquote><hr><h3 id="HTTP的状态码以及代表的意思？"><a href="#HTTP的状态码以及代表的意思？" class="headerlink" title="HTTP的状态码以及代表的意思？"></a>HTTP的状态码以及代表的意思？</h3><p><a href="https://blog.csdn.net/qq_35689573/article/details/82120851">原博文——常见的14种HTTP状态码</a></p><p><strong>1XX——表示通知信息，如请求收到了或正在进行处理</strong></p><p><strong>2XX——表明请求被正常处理了</strong></p><blockquote><ul><li>200 OK：请求已正常处理。</li><li>204 No Content：请求处理成功，但没有任何资源可以返回给客户端，一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。</li><li>206 Partial Content：是对资源某一部分的请求，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content-Range指定范围的实体内容。</li></ul></blockquote><p><strong>3XX——表明浏览器需要执行某些特殊的处理以正确处理请求</strong></p><blockquote><ul><li>301 Moved Permanently：资源的uri已更新，你也更新下你的书签引用吧。永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。</li><li>302 Found：资源的URI已临时定位到其他位置了，姑且算你已经知道了这个情况了。临时性重定向。和301相似，但302代表的资源不是永久性移动，只是临时性性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。</li><li>303 See Other：资源的URI已更新，你是否能临时按新的URI访问。该状态码表示由于请求对应的资源存在着另一个URL，应使用GET方法定向获取请求的资源。303状态码和302状态码有着相同的功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别。当301,302,303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。</li><li>304 Not Modified：资源已找到，但未符合条件请求。该状态码表示客户端发送附带条件的请求时（采用GET方法的请求报文中包含If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since中任一首部）服务端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304。</li><li>307 Temporary Redirect：临时重定向。与302有相同的含义。</li></ul></blockquote><p><strong>4XX——表明客户端是发生错误的原因所在。</strong></p><blockquote><ul><li>400 Bad Request：服务器端无法理解客户端发送的请求，请求报文中可能存在语法错误。</li><li>401 Unauthorized：该状态码表示发送的请求需要有通过HTTP认证（BASIC认证，DIGEST认证）的认证信息。</li><li>403 Forbidden：不允许访问那个资源。该状态码表明对请求资源的访问被服务器拒绝了。（权限，未授权IP等）</li><li>404 Not Found：服务器上没有请求的资源。路径错误等。</li></ul></blockquote><p><strong>5XX——服务器本身发生错误</strong></p><blockquote><ul><li>500 Internal Server Error：貌似内部资源出故障了。该状态码表明服务器端在执行请求时发生了错误。也有可能是web应用存在bug或某些临时故障。</li><li>503 Service Unavailable：抱歉，我现在正在忙着。该状态码表明服务器暂时处于超负载或正在停机维护，现在无法处理请求。</li></ul></blockquote><hr><h3 id="简述HTTPS以及实现过程。（为什么要使用HTTPS、HTTPS基本概念、加密方式、实现过程）"><a href="#简述HTTPS以及实现过程。（为什么要使用HTTPS、HTTPS基本概念、加密方式、实现过程）" class="headerlink" title="简述HTTPS以及实现过程。（为什么要使用HTTPS、HTTPS基本概念、加密方式、实现过程）"></a>简述HTTPS以及实现过程。（为什么要使用HTTPS、HTTPS基本概念、加密方式、实现过程）</h3><p><strong>为什么需要HTTPS（HTTP Secure 或者 HTTP over SSL）：</strong></p><blockquote><p>HTTP有很多<strong>安全漏洞</strong>：</p><ul><li>通信使用明文（不加密），内容可能会被窃听。</li><li>不验证通信方的身份，因此有可能遭遇伪装。</li><li>无法证明报文的完整性，所以有可能已遭篡改。</li></ul></blockquote><p><strong>也就是说：HTTP+加密+认证+完整性保护=HTTPS</strong></p><p><strong>HTTPS是身披SSL外壳的HTTP：</strong></p><blockquote><ul><li>HTTPS并非是应用层的一种新协议。只是通信接口部分用SSL和TLS协议代替而已。</li><li>通常情况下，HTTP直接和TCP通信。当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信。</li></ul></blockquote><p><strong>加密方式：对称加密与非对称加密</strong></p><blockquote><ul><li><p><strong>对称加密：</strong>加密和解密都是同一个密匙。</p><blockquote><p>对称加密速度快，适合Https加密算法，但是服务器和浏览器之间<strong>传递密钥的过程</strong>被人监听，相当明文传输。</p></blockquote></li><li><p><strong>非对称加密：</strong>密钥成对出现，分为公钥和私钥，公钥加密需要私钥解密，私钥加密需要公钥解密。</p><blockquote><p>服务端只将公钥暴露，浏览器使用公钥对消息进行非对称加密，服务端用私钥解密。但是服务端向浏览器回复的时候，只能用私钥进行加密，浏览器只能用公钥解密。但是：公钥是所有人都知道的，所有人都可以读取服务端回复的消息来进行解密，所以<strong>解决不了服务端向浏览器传递消息</strong>。</p></blockquote></li></ul><p><strong>HTTPS加密方式：混合加密方式，对称加密与非对称加密结合使用。</strong></p><blockquote><ul><li>使用非对称加密方式安全地交换在稍后的共享密钥加密中要使用的密钥。</li><li>确保交换的密钥是安全的前提下，使用共享密钥加密方式进行通信。</li></ul></blockquote></blockquote><p><strong>HTTPS工作流程：</strong></p><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626669165_5d3e9cdc64fcb16806.png" alt="5d3e9cdc64fcb16806"></p><blockquote><p>步骤 <strong>1</strong>： 客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</p><p>步骤 <strong>2</strong>： 服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</p><p>步骤 <strong>3</strong>： 之后服务器发送 Certificate 报文。报文中包含公开密钥证书。</p><p>步骤 <strong>4</strong>： 最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的 SSL 握手协商部分结束。</p><p>步骤 <strong>5</strong>： SSL 第一次握手结束之后，客户端以 Client Key Exchange 报文作为回应。报文中包含通信加密中使用的一种被称为 Pre-master secret 的随机密码串。该报文已用步骤 3 中的公开密钥进行加密。</p><p>步骤 <strong>6</strong>： 接着客户端继续发送 Change Cipher Spec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。</p><p>步骤 <strong>7</strong>： 客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。</p><p>步骤 <strong>8</strong>： 服务器同样发送 Change Cipher Spec 报文。</p><p>步骤 <strong>9</strong>： 服务器同样发送 Finished 报文。</p><p>步骤 <strong>10</strong>： 服务器和客户端的 Finished 报文交换完毕之后，SSL 连接</p><p>就算建立完成。当然，通信会受到 SSL 的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。</p><p>步骤 <strong>11</strong>： 应用层协议通信，即发送 HTTP 响应。</p><p>步骤 <strong>12</strong>： 最后由客户端断开连接。断开连接时，发送 close_notify 报文。上图做了一些省略，这步之后再发送 TCP FIN 报文来关闭与 TCP 的通信。</p></blockquote><hr><h3 id="简述HTTPS与HTTP的区别？"><a href="#简述HTTPS与HTTP的区别？" class="headerlink" title="简述HTTPS与HTTP的区别？"></a>简述HTTPS与HTTP的区别？</h3><p><a href="https://www.cnblogs.com/wqhwe/p/5407468.html">原博文——HTTPS与HTTP的区别</a></p><p><strong>HTTP：</strong>是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p><strong>HTTPS：</strong>是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><ul><li>HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。</li><li>HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。</li><li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。</li></ul><hr><h3 id="IP数据报格式？"><a href="#IP数据报格式？" class="headerlink" title="IP数据报格式？"></a>IP数据报格式？</h3><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626659313_5d4234f6c54cb34330.png" alt="5d4234f6c54cb34330"></p><p>IP数据报首部可以分为固定长度（20字节）和可选长度。固定长度是所有IP数据报所必须的。<strong>固定部分个字段的意义如下：</strong></p><blockquote><ul><li><p><strong>版本：</strong> 占4位，指IP协议的版本，通信双方的协议版本必须一致。</p></li><li><p><strong>首部长度：</strong> 占4位，可表示的最大十进制数是15（1111）。它的单位是4字节（也就是32位），因此首部长度最小值为5（固定长度部分），可选长度最长为40字节。</p></li><li><p><strong>区分服务：</strong> 占8位，用来获得更好的服务。</p></li><li><p><strong>总长度：</strong> 占16位，首部和数据部分的总长度，单位为字节。因此IP数据报的最大长度为2^16-1。</p></li><li><p><strong>标识：</strong> 占16位。当数据报的长度超过网络的最大传送单元使，就给该数据报的所有分片赋值相同的标识，相同的标识字段的值使分片后的各数据报片能正确的重装成原来的数据报。</p></li><li><p><strong>标志：</strong> 占3位，但是只有两位具有意义。</p><blockquote><ul><li>标记字段中的最低位记为MF。MF=1表示后面还有分片，MF=0表示这是最后一个分片。</li><li>标志字段中间的一位记为DF，意思是能否分片，只有DF=0时才能分片。</li></ul></blockquote></li><li><p><strong>片偏移：</strong> 占13位。片偏移指出：较长的分组在分片后，某片在原分组中的相对位置。也就是说，数据片相对于初始位置的距离。单位是8字节。因此，除去最后一个数据片，每个数据片的长度都是8字节的倍数。</p></li><li><p><strong>生存时间：</strong> 占8位，TTL（Time To Live），单位为跳数，跳数表明该数据报至多能在互联网中经过多少个路由器，每经过一个路由器就减1。</p></li><li><p><strong>协议：</strong> 占8位，协议字段指出该数据报携带的数据是使用哪种协议，以便使目的主机的IP层知道应将数据部分上交给哪个协议进行处理。</p><blockquote><table><thead><tr><th>协议名</th><th>ICMP</th><th>IGMP</th><th>IP</th><th>TCP</th><th>EGP</th><th>IGP</th><th>UDP</th><th>IPv6</th><th>ESP</th><th>OSPF</th></tr></thead><tbody><tr><td>协议字段值</td><td>1</td><td>2</td><td>4</td><td>6</td><td>8</td><td>9</td><td>17</td><td>41</td><td>50</td><td>89</td></tr></tbody></table></blockquote></li><li><p><strong>首部校验和：</strong> 占16位，这个字段只检验数据报的首部，但是不包括数据部分。</p><blockquote><p><img src="https://i.loli.net/2019/08/01/5d423d384cdf496110.png" alt="5d423d384cdf496110"></p><ul><li>在发送方，先把数据报划分为许多16位的字的序列，并把校验和字段置为0，。</li><li>用反码算术运算（从低位到高位计算，0+0等于0,0+1等于1,1+1等于0，但是要进1。）把所有的16位字相加后，将得到的反码写入校验和字段。</li><li>接收方接收到数据报之后，将首部的所有16位字再使用反码运算相加一次，将得到的和取反码，即得出接收方的检验和的计算结果。如果结果全为0，则代表首部未发生变化，保留该数据报，反之则丢弃。</li></ul><p>参考：<a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html">原码、补码、反码详解</a></p></blockquote></li><li><p><strong>源地址：</strong> 占32位。</p></li><li><p><strong>目的地址：</strong> 占32位。</p></li></ul></blockquote><hr><h3 id="UDP数据报格式？"><a href="#UDP数据报格式？" class="headerlink" title="UDP数据报格式？"></a>UDP数据报格式？</h3><p><a href="https://www.cnblogs.com/anzhengyu/p/11232699.html">原博文——UDP数据报格式</a></p><p>UDP用户数据报分为 = 首部字段 （8个字节，4个字段，每个字段2个字节）+ 数字字段。</p><p>首部字段：</p><ul><li>源端口： 源端口号。在需要对方回信的时候选用，不需要填0。</li><li>目的端口： 目的端口号。必填。</li><li>长度： UDP用户数据报的长度。最小为8。</li><li>检验和：检测UDP用户数据报传输过程中是否有错。有错就丢弃。</li></ul><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626659129_5d3524ef4841844167.png" alt="5d3524ef4841844167"></p><p><strong>补充：UDP检验首部校验和的方法：</strong></p><blockquote><p>在计算检验和时，需要在用户数据报之前加12字节的伪首部。</p><p>所谓伪首部，是指他并不是UDP用户数据报的真正首部，只是在计算检验和的时候，临时加上的，检验和就是按照这个临时的用户数据报计算的。既不下传也不向上提交。伪首部的格式如上图。</p><p>UDP计算检验和与IP数据报类似，只是UDP的首部校验和把首部和数据一起都检验了。步骤如下：</p><ul><li>在发送方，首先先把全零放到检验和字段；</li><li>再把伪首部和UDP用户数据报看成是由许多16位的字串连接起来的；</li><li>然后按二进制反码计算出这些16位字的和，并将此和的反码写入检验和字段后，就发送这样的用户数据报。</li><li>在接收方，把收到的UDP用户数据报连同伪首部（以及可能的填充全零字节）一起，按二进制反码求这些16位字的和。</li><li>若无差错时其结果应全为1；否则就是有差错出现，可以选择丢失，可以上传（但是要附上错误信息）。</li></ul><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626662009_5d354dcc35e6338961.png" alt="5d354dcc35e6338961"></p></blockquote><hr><h3 id="TCP报文段格式？"><a href="#TCP报文段格式？" class="headerlink" title="TCP报文段格式？"></a>TCP报文段格式？</h3><p><a href="https://www.cnblogs.com/anzhengyu/p/11232770.html">原博文——TCP报文首部格式</a></p><p>TCP虽然是面向字节流的，但是TCP传输的数据单元却是报文段。一个报文段可以分为首部和数据两部分。</p><p>TCP报文段的首部的前20个字节是固定的，后面的4n字节是需要增加的选项。因此TCP首部的最小长度是20字节。</p><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626659105_5d356311a685317386.png" alt="5d356311a685317386"><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626659105_5d356311a685317386.png" alt="5d356311a685317386"></p><p>首部部分字段的意义如下：</p><blockquote><ul><li><p>源端口和目的端口：各占2个字节，分别写入源端口号和目的端口号。TCP的分用功能也是通过端口号实现的。</p></li><li><p>序号：占4字节。在TCP连接中传送的字节流中的每一个字节都按照顺序编号。首部中的序号字段值则代表本报文段所发送的数据的第一个字节的序号。</p></li><li><p>确认号：占4字节。代表期望收到对方下一个报文段的第一个数据字节的序号。需要注意：<code>若确认号=N，则表明：到序号N-1为止的所有数据都已正确收到</code></p></li><li><p>数据偏移：占4位。他指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。一般情况下为20字节，但是首部中还有不确定的选项字段。它的单位是4字节，而它的最大值是15，因此数据偏移最大值为60字节，也就是说选项不能超过40字节。</p></li><li><p>保留：占6位。以防后续使用。</p><p><strong>下面是6个控制位，每个占一位：</strong></p></li><li><p>紧急URG：当URG=1时，表明紧急字段有效，它告诉系统此报文中有紧急数据，应该尽快传送。</p></li><li><p>确认ACK：仅当ACK=1时确认号字段才有效。</p></li><li><p>推送PSH：当两个应用进程进行交互式的通信时，有时一端的应用进程希望在键入一个命令后立即就能收到对方的相应，这时设置PSH=1。</p></li><li><p>复位RST：当RST=1时，表明TCP连接中出现严重错误，必须释放连接，再重新建立运输连接。RST=1还可以用来拒绝一个非法的报文段或拒绝打开一个连接。</p></li><li><p>同步SYN：在建立连接时用来同步序号。当SYN=1，ACK=0时代表是连接请求报文段。若对方同意建立连接，则应在相应报文段中使SYN=1，ACK=1。也就是说，SYN=1代表连接请求或者连接接受报文。</p></li><li><p>终止FIN。用于释放一个连接。当FIN=1时，代表此报文段的发送方的数据已发送完毕，并且请求释放运输连接。</p><p><strong>控制位到这结束。</strong></p></li><li><p>窗口：占2字节。窗口值告诉对方：从本报文段中的确认号算起，接收方目前允许对方发送的数据量（以字节为单位）。之所以设置这个限制，是因为接收方的数据缓存空间是有限的。总之，窗口值作为接收方让发送方设置其窗口大小的依据。</p></li><li><p>检验和：占2字节。检验的范围包括首部字段和数据字段。和UDP检验的方法一样，只不过把伪首部第四个字段的17改成6.</p></li><li><p>紧急指针：占2字节。只有在紧急URG=1时才有效，它指出本报文段中的紧急数据的字节数。</p></li><li><p>选项：长度可变，最大40字节</p><blockquote><p>TCP最初只规定了一种选项，即最大报文长度MSS。MSS是每一个TCP报文段中的数据字段的最大长度，而并不是整个TCP报文段的长度。</p></blockquote></li></ul></blockquote><hr><h3 id="以太网MAC帧格式？"><a href="#以太网MAC帧格式？" class="headerlink" title="以太网MAC帧格式？"></a>以太网MAC帧格式？</h3><p><img src="https://uploadfiles.nowcoder.com/files/20190801/464249456_1564626664984_5d424c85e043a98902.png" alt="5d424c85e043a98902"></p><p>以太网MAC帧较为简单，由五个字段组成，前两个字段分别为6字节长的<strong>目的地址</strong>和<strong>源地址</strong>。第三个字段是2字节的<strong>类型字段</strong>，用来标志上一层使用的是什么协议，以便把收到的MAC帧的数据上交给上一层的这个协议。第四个字段是<strong>数据字段</strong>，其长度为46~1500字节（46字节是因为最小长度64字节减去18字节的首部和尾部）。最后一个字段是4字节的<strong>帧检测</strong>序列FCS（使用CRC检测）。</p><p>如果对你有帮助，就推荐+收藏吧！😜😜</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识点整理（一）</title>
      <link href="/2020/12/21/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li-yi/"/>
      <url>/2020/12/21/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li-yi/</url>
      
        <content type="html"><![CDATA[<p><b><span style="color:#FF4500;">写在最前面：本文章所有内容是本人从网络以及《计算机网路第七版》整理而得，若有错误请联系我。</span></b></p><p><b><span style="color:#FF4500">另一部分参见：</span></b><a href="2020/12/22/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li-er/">计算机网络面试常考总结（二）</a></p><p><img src="/2020/12/21/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li-yi/1.jpg" alt="计算机网络体系结构"></p><ul><li><p><strong>OSI七层协议体系：</strong> 概念清楚，理论也比较完整，但是它既复杂也不实用。</p></li><li><ul><li><p>物理层：</p><blockquote><ul><li>计算机网络体系中最底层，为所有网络/数据数据通信提供物理的通信线路。另外通信线路可以通过信道复用方式在一条物理线路中划分多条信道。默认情况下，一条物理线路就是一条信道。</li><li><strong>常用协议：</strong> ISO2110，IEEE802，IEEE802.2</li><li><strong>常用硬件：</strong> 中继器、集线器、还有我们通常说的双绞线也工作在物理层</li></ul></blockquote></li><li><p>数据链路层：</p><blockquote><ul><li>为同一局域网内部的网络/数据通信提供点到点的数据传输通道，通过MAC地址寻址把数据传输到目的节点。</li><li>数据链路层的通信只能在同一网段进行，要在不同网段间进行，必须依靠网络层和传输层。</li><li>数据链路层提供的不是物理线路，而是在物理层的物理线路基础之上，通过数据链路层协议构建的虚拟数据传输通道，并且只能在同一段内进行数据转发。</li><li><strong>常用协议：</strong>SLIP，CSLIP，PPP，ARP，RARP，MTU。<strong>（在OSI模型中ARP协议属于链路层；而在TCP/IP模型中，ARP协议属于网络层。）</strong></li><li><strong>常用硬件：</strong>网桥、以太网交换机、网卡（其实网卡是一半工作在物理层、一半工作在数据链路层）</li></ul></blockquote></li><li><p>网络层：</p><blockquote><ul><li>为不同网段之间的数据转发提供路径选择，通过IP地址（也有可能是其他网络地址）把数据包转发到目的节点。网络层这种寻址功能我们称为“路由寻址”，就是选择哪一条路径到达下一个节点。</li><li>网络层的功能仅起到不同网络间转发数据包的功能，最终数据还是要在目的网络的数据链路层进行传输，在到达下一个节点设备（如路由器）再进行转发。</li><li><strong>常用协议：</strong>IP，ICMP，RIP，OSPF，BGP，IGMP</li><li><strong>常用硬件：</strong>路由器</li></ul></blockquote></li><li><p>运输层：</p><blockquote><ul><li>是在下面三层构建的网络平台基础上专门为通信双方构建端到端（不是点到点）的数据传输通道，使通信双方就像在直接进行数据传输一样。这个端到端的传输通道是可以跨网络的。</li><li><strong>常用协议：</strong> TCP，UDP</li><li><strong>常用硬件：</strong>网关</li></ul></blockquote></li><li><p>会话层：</p><blockquote><ul><li>为具体的用户建立会话进程。</li><li><strong>常用协议：</strong> 无</li><li><strong>常用硬件：</strong>网关</li></ul></blockquote></li><li><p>表示层：</p><blockquote><ul><li>是对用户网络应用数据的具体解释，包括在网络通信中可采用的信息技术、可采用的加密方式等。</li><li><strong>常用协议：</strong> 无</li><li><strong>常用硬件：</strong>网关</li></ul></blockquote></li><li><p>应用层：</p><blockquote><ul><li>用户进行具体网络应用的层次，是具体网络应用的体现者，负责接受用户的各种网络应用进程的调用。</li><li><strong>常用协议：</strong> TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</li><li><strong>常用硬件：</strong>网关</li></ul></blockquote></li></ul></li><li><p><strong>TCP/IP四层协议体系：</strong> 实际应用非常广泛，从实质上讲，TCP/IP体系只有最上面的三层，最底下的网络接口层实际上没有什么内容。</p></li><li><ul><li>网络接口层：合并了原来OSI中的物理层和数据链路层，提供局域网的功能。</li><li>网际层：同OSI网络层</li><li>运输层：同OSI运输层</li><li>应用层：合并了OSI中最上面的三层。</li></ul></li><li><p><strong>五层协议体系：</strong> 《计算机网络第七版》中，为了方便介绍网络原理，而引人的体系。实际应用还是TCP/IP协议体系。</p></li><li><ul><li>物理层：同OSI物理层</li><li>数据链路层：同OSI数据链路层</li><li>网络层：同OSI网络层</li><li>运输层：同OSI运输层</li><li>应用层：合并了OSI中最上面的三层。</li></ul></li></ul><hr><h3 id="OSI体系与TCP-IP体系的联系与区别？"><a href="#OSI体系与TCP-IP体系的联系与区别？" class="headerlink" title="OSI体系与TCP/IP体系的联系与区别？"></a>OSI体系与TCP/IP体系的联系与区别？</h3><ul><li><p>相同点：</p><blockquote><ul><li>层次结构划分思想相同；</li><li>总体层次结构相同；</li><li>核心组成一样，都定义了“服务“、”接口“、”协议“上重要核心。</li></ul></blockquote></li><li><p>不同点：</p><blockquote><ul><li>适用范围不同：OSI在标准协议发明前就产生了，不偏重于任何特定的网络类型，具有最广泛的理论参考性，是一个理想代的模型；而TCP/IP则相反，它是针对TCP/IP协议簇产生的，最具实践性；</li><li>层次结构不同：TCP/IP体系中没有会话层和表示层；</li><li>支持通信模式不同：OSI同时支持无连接和面向连接的网络通信（不仅支持TCP/IP协议网络中无连接的IP网络协议，同时支持NetWare SPX/IPX网络中的面向连接的SPX协议等）。TCP/IP模型的网络层只提供无连接的服务。</li><li>所包括的通信协议不同。</li></ul></blockquote></li></ul><hr><h3 id="路由器、中继器、集线器、交换机、网关、网桥各自的概念以及作用？"><a href="#路由器、中继器、集线器、交换机、网关、网桥各自的概念以及作用？" class="headerlink" title="路由器、中继器、集线器、交换机、网关、网桥各自的概念以及作用？"></a>路由器、中继器、集线器、交换机、网关、网桥各自的概念以及作用？</h3><ul><li><p>路由器（Router）：</p><blockquote><ul><li>工作范围：网络层，不同网络之间</li><li>功能：是一种计算机网络设备，提供了<strong>路由与转送</strong>两种重要机制，可以决定数据包从来源端到目的端所经过 的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转 送。路由工作在OSI模型的第三层——即网络层，例如网际协议。</li></ul></blockquote></li><li><p>中继器：</p><blockquote><ul><li>工作范围：物理层</li><li>功能：中继器是将一条电缆传输过来的信号经过放大和调整以后再传输给另一个电缆。因此，它是物理层上的网络延长设备。一般而言，中继器连接的双方是相同的物理介质，但是有些也可以完成不同媒介之间的连接。但是中继器只是完成了信号的转换，而不能完成转发。也就是说，中继器不能再传输速度不同的介质之间完成转发。</li></ul></blockquote></li><li><p>集线器：</p><blockquote><ul><li>工作范围：物理层</li><li>功能：如果每个设备只有一个对外接口，那么意味着只能建立一对一的点到点的通信。为了能够让通信“一对多”，需要将信号复制广播，于是，产生了集线器。集线器的主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。</li></ul></blockquote></li><li><p>交换机：</p><blockquote><ul><li>工作范围：数据链路层</li><li>功能：交换机内部的CPU会在每个端口成功连接时，通过ARP协议学习它的MAC地址，保存成一张ARP表。在今后的通讯中，发往该MAC地址的数据包将仅送往其对应的端口，而不是所有的端口。也就是说，交换机也有一张表，记录的是port-mac。按照传输数据包的层次，交换机可以分为一、二…..七层交换机。</li></ul></blockquote></li><li><p>网桥：</p><blockquote><ul><li>工作范围：数据链路层</li><li>功能：网桥能够连接两个不同的数据链路，即使他们的传输速度不同。它能够识别数据链路中的数据帧，并将这些数据帧临时存储在内存中，然后在重新生成一个新的数据帧转发给另外一个网段。网桥还具有检错功能。因此，网桥有时候也会被称为2层交换机。（数据链路层设备）有些网桥能够记住曾今通过自己转发的数据帧的MAC地址，并保存在内部的内存表中。这种网桥被称为自学式网桥。</li></ul></blockquote></li><li><p>网卡：</p><blockquote><ul><li><p>工作范围：物理层、数据链路层</p></li><li><p>功能：又称<strong>网络接口控制器</strong>，<strong>网络适配器</strong>（network adapter），<strong>网卡</strong>（network interface card），或<strong>局域网接收器</strong>（LAN adapter），是一块被设计用来允许计算机在计算机网络上进行通讯的计算机硬件。网卡的作用是负责接收网络上的数据包，通过和自己本身的物理地址相比较决定是否为本机应接信息，解包后将数据通过主板上的总线传输给本地计算机，另一方面将本地计算机上的数据打包后送出网络。</p><blockquote><ul><li>实现与主机总线的网络通讯连接，网卡相当于桥梁设备</li><li>实现主机与介质之间的电信号匹配</li><li>提供数据缓冲能力</li></ul></blockquote></li></ul></blockquote></li><li><p>网关：</p><blockquote><ul><li>工作范围：运输层、应用层</li><li>功能：网关（Gateway）负责第三层（网络层）以上的数据中继，实现不同体系结构的网络协议转换，它通常采用软件的方法实现，并且与特定的应用服务一一对应。比如：OSI的文件传输服务FTAM和TCP/IP的文件传输服务FTP，尽管二者都是文件传输但是由于所执行的协议不同不能直接进行通信，而需要网关将两个文件传输系统互连，达到相互进行文件传输的目的。</li></ul></blockquote></li></ul><hr><h3 id="交换机与路由器的区别？"><a href="#交换机与路由器的区别？" class="headerlink" title="交换机与路由器的区别？"></a>交换机与路由器的区别？</h3><ul><li><p>工作层次不同</p><blockquote><p>交换机是工作在OSI/RM体系结构的第二层（数据链路层），而路由器一开始就设计工作在OSI模型的网络层。由于交换机工作在OSI的第二层（数据链路层），所以它的工作原理比较简单，而路由器工作在OSI的第三层（网络层），可以得到更多的协议信息，路由器可以做出更加智能的转发决策。</p></blockquote></li><li><p>数据转发所依据的对象不同</p><blockquote><p>交换机是利用物理地址或者说MAC地址来确定转发数据的目的地址。而路由器则是利用不同网络的ID号（即IP地址）来确定数据转发的地址。IP地址是在软件中实现的，描述的是设备所在的网络，有时这些第三层的地址也称为协议地址或者网络地址。MAC地址通常是硬件自带的，由网卡生产商来分配的，而且已经固化到了网卡中去，一般来说是不可更改的。而IP地址则通常由网络管理员或系统自动分配。</p></blockquote></li><li><p>传统的交换机只能分割冲突域，不能分割广播域；而路由器可以分割广播域</p><blockquote><p>由交换机连接的网段仍属于同一个广播域，广播数据包会在交换机连接的所有网段上传播，在某些情况下会导致通信拥挤和安全漏洞。连接到路由器上的网段会被分配成不同的广播域，广播数据不会穿过路由器。虽然第三层以上交换机具有VLAN功能，也可以分割广播域，但是各子广播域之间是不能通信交流的，它们之间的交流仍然需要路由器。</p></blockquote></li><li><p>路由器提供了防火墙的服务</p><blockquote><p>路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴。 交换机一般用于LAN-WAN的连接，交换机归于网桥，是数据链路层的设备，有些交换机也可实现第三层的交换。路由器用于WAN-WAN之间的连接，可以解决异性网络之间转发分组，作用于网络层。他们只是从一条线路上接受输入分组，然后向另一条线路转发。这两条线路可能分属于不同的网络，并采用不同协议。相比较而言，路由器的功能较交换机要强大，但速度相对也慢，价格昂贵，第三层交换机既有交换机线速转发报文能力，又有路由器良好的控制功能，因此得以广泛应用。</p></blockquote></li></ul><hr><h3 id="IP地址是如何分类的？"><a href="#IP地址是如何分类的？" class="headerlink" title="IP地址是如何分类的？"></a>IP地址是如何分类的？</h3><p><strong>IP地址 = 网络号 + 主机号</strong></p><blockquote><ul><li>A、B、C类IP地址的网络号字段分别是1、2、3个字节长，而在网络号的1-3位是类别位，分别是：0、10、110。</li><li>A、B、C类IP地址的主机号字段分别为3、2、1个字节。</li><li>A、B、C类IP地址是单播地址，D类IP地址（前四位为1110）为多播地址，E类IP地址（前四位1111）保留为以后使用。</li></ul></blockquote><hr><h3 id="A、B、C三类常用的IP地址的指派范围？有哪些特殊的IP地址以及它们的含义？"><a href="#A、B、C三类常用的IP地址的指派范围？有哪些特殊的IP地址以及它们的含义？" class="headerlink" title="A、B、C三类常用的IP地址的指派范围？有哪些特殊的IP地址以及它们的含义？"></a>A、B、C三类常用的IP地址的指派范围？有哪些特殊的IP地址以及它们的含义？</h3><p><img src="https://i.loli.net/2019/07/25/5d3903a142c0641505.jpg" alt="5d3903a142c0641505"></p><p><strong>特殊的IP地址</strong>：</p><blockquote><ul><li>网络号全0代表“this，这个”，也就是本网络的意思，当网络号和主机号全为0时则代表本网络上的本主机。网络号为0，主机号为host-id，则代表本网络上的某个主机（主机号为host-id）。这类IP地址只能作为源地址，不能作为目的地址。</li><li>网络号和主机号全为1，代表只在本网络上进行广播，路由器不转发，不可以作为源地址，可以作为目的地址。</li><li>网络号为net-id，主机号为全1，代表对net-id上所有的主机进行广播。可以作为目的地址，不可以作为源地址。</li><li>网络号为127（01111111），保留作为本地环回测试本主机的进程之间的通信只用。主机号可以为非全0或者全1的任何数，可以作为源地址，也可以作为目的地址。</li></ul></blockquote><p><strong>可以指派的IP地址：</strong></p><blockquote><ul><li>A类地址的网络号中：全0和127是不指派的；主机号中：全0代表本主机所连接的单个网络地址，全1代表网络上的所有主机，也是不指派的。</li><li>B类IP地址网络号中：<strong>128.0.0.0不指派</strong>；主机号中：全0和全1也不指派。</li><li>C类IP地址网络号中：<strong>192.0.0.0不指派</strong>；主机号中：全0和全1也不指派。</li></ul></blockquote><p><strong>总结：</strong></p><blockquote><ul><li>网络号全为0：本网络</li><li>主机号全为0：代表单个网络地址</li><li>主机号全为1：代表某个网络上的所有主机</li></ul></blockquote><hr><h3 id="简述ARP协议的工作原理。"><a href="#简述ARP协议的工作原理。" class="headerlink" title="简述ARP协议的工作原理。"></a>简述ARP协议的工作原理。</h3><blockquote><ul><li><p><strong>ARP：</strong>Address Resolution Protocol，地址解析协议</p></li><li><p><strong>功能：</strong>为了从网络层的IP地址，解析出在数据链路层使用的硬件地址。注意：ARP解决的是同一局域网上的主机和路由器的IP地址和硬件地址的映射问题。</p></li><li><p><strong>工作原理：</strong></p><p>每一台主机都设有一个ARP告诉缓存，里面有本局域网上的各个主机和路由器的IP地址到硬件地址的映射。当A要向本局域网上的B发送IP数据报时，则A先查看ARP高速缓存中有无B的IP地址：</p><ul><li>如果有：就在ARP高速缓存中查出该IP地址的硬件地址，把这个硬件地址写入MAC帧，再通过局域网将MAC帧发往此硬件地址。</li><li>如果没有：ARP向本局域网广播（请求分组是广播，响应分组是单播）发送一个ARP请求分组，表明自己的IP地址和硬件地址以及要寻找的IP地址。B接收到请求分组后，收下并且向A发送相应分组，其余主机不做相应。A收到B的相应分组后再进行常规的数据传输。</li></ul></li></ul></blockquote><p><strong>补充：</strong></p><blockquote><p><strong>生存时间：</strong>ARP对每一个映射地址的项目都设有生存时间（例如10-20分钟），这是为了防止该局域网中某些主机的硬件地址发生改变的情况。</p></blockquote><hr><h3 id="简述ICMP协议和IGMP协议。"><a href="#简述ICMP协议和IGMP协议。" class="headerlink" title="简述ICMP协议和IGMP协议。"></a>简述ICMP协议和IGMP协议。</h3><p><strong>ICMP：</strong></p><blockquote><ul><li>Internet Control Message Protocol，网际控制报文协议。</li><li><strong>功能：</strong> 为了更加有效的转发IP数据报和提高交付成功的机会，ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告。</li></ul></blockquote><p><strong>IGMP：</strong></p><blockquote><ul><li>Internet Group Management Protocol，网际组管理协议。</li><li><strong>功能：</strong> IGMP协议是让连接在本局域网上的多播路由器知道本局域网上是否有主机（严格来讲是主机上的某个进程）参加或者退出了某个多播组。</li></ul></blockquote><hr><h3 id="TCP和UDP的区别。"><a href="#TCP和UDP的区别。" class="headerlink" title="TCP和UDP的区别。"></a><strong>TCP和UDP的区别。</strong></h3><p>TCP：传输控制协议，Transmission Control Protocol</p><p>UDP：用户数据报协议，User Datagram Protocol</p><ul><li><p><strong>TCP是面向连接的，UDP是无连接的。</strong></p><blockquote><p>TCP在传输数据之前必须建立有效的连接，数据传输后也要释放连接。而UDP在传输前不需要建立连接，远程主机接收到UDP用户数据报之后也不需要给出确认。</p></blockquote></li><li><p><strong>TCP提供可靠的全双工通信，UDP尽最大努力通信，不保证可靠。</strong></p></li><li><p><strong>TCP占用资源多，UDP占用资源少。</strong></p></li><li><p><strong>运输协议数据单元不同，TCP是TCP报文段，UDP是用户数据报。</strong></p></li><li><p><strong>TCP是面向字节流的，UDP是面向报文的。</strong></p><blockquote><ul><li><strong>面向字节流</strong>：虽然应用程序和TCP的交互是一次一个数据块（大小不等），但是TCP把应用程序交下来的数据只看出一连串的无结构字节流。TCP不知道字节流的具体含义，也不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块之间的大小关系。但是接收方应用程序收到的字节流必须与发送方发送的字节流完全一致。</li><li><strong>面向报文</strong>：发送方的UDP对应用程序交下来的报文添加首部后直接交付给IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。</li></ul></blockquote></li><li><p><strong>TCP有拥塞控制，UDP没有拥塞控制</strong></p></li><li><p><strong>TCP不提供广播和多播服务，UDP支持一对一、多对一、一对多、多对多的交互通信。</strong></p></li></ul><hr><h3 id="TCP如何保证可靠传输？"><a href="#TCP如何保证可靠传输？" class="headerlink" title="TCP如何保证可靠传输？"></a>TCP如何保证可靠传输？</h3><p><a href="https://blog.csdn.net/liuchenxia8/article/details/80428157">原博文——TCP如何保证可靠传输</a></p><ul><li><p><strong>校验和：</strong> TCP在发送报文之前，发送方要计算校验和，收到数据后，接收方也要计算校验和，如果校验和不相等则丢弃。</p></li><li><p><strong>序列号与确认应答：</strong></p><blockquote><ul><li><strong>序列号：</strong>TCP传输时将每个字节的数据都进行了编号，这就是序列号。</li><li><strong>确认应答：</strong>TCP传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答。也就是发送ACK报文。这个ACK报文当中带有对应的确认序列号，告诉发送方，接收到了哪些数据，下一次的数据从哪里发。</li><li><strong>序列号的作用</strong>不仅仅是应答的作用，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据。这也是TCP传输可靠性的保证之一。</li></ul></blockquote></li><li><p><strong>超时重传:</strong> 在TCP传输过程中，我们在发送一部分数据后，都会等待对方的ACK确认报文，如果中间出现差错，没有收到ACK报文，这时候需要启动超时重传机制。这种超时重传机制保证了TCP在网络延迟或者报文丢失下的可靠传输。</p><blockquote><p>超时的原因：</p><ul><li>接收方没有收到TCP报文段：网络延迟或者丢包；</li><li>发送方没有收到ACK报文段：网络延迟或者ACK报文丢失。</li></ul></blockquote></li><li><p><strong>连接管理：</strong>连接管理就是三次握手与四次挥手的过程（后面有详细解释）</p></li><li><p><strong>流量控制：</strong> 流量控制的目的是让接收方来得及接收数据。这样避免了数据丢包以及网络拥塞等情况。</p></li><li><p><strong>拥塞控制：</strong> 拥塞控制就是防止过多的数据注入到网络中，这样使网络中的路由器或者链路不至于过载。</p></li></ul><hr><h3 id="TCP三次握手的过程？为什么采用三次握手？两次可以吗？"><a href="#TCP三次握手的过程？为什么采用三次握手？两次可以吗？" class="headerlink" title="TCP三次握手的过程？为什么采用三次握手？两次可以吗？"></a>TCP三次握手的过程？为什么采用三次握手？两次可以吗？</h3><p><a href="https://www.cnblogs.com/anzhengyu/p/11232813.html">原博文——TCP运输连接管理</a></p><p><img src="https://i.loli.net/2019/07/25/5d3963c32a30b71624.png" alt="5d3963c32a30b71624"></p><p><strong>TCP三次握手的过程（A向B发送数据）：</strong></p><blockquote><ul><li>A主动打开连接，B被动打开连接。B先进入收听状态，A打算建立TCP连接时，先向B发送连接请求报文段，其中<strong>同步位SYN=1，初始序号seq=x</strong>，这个报文段不能携带数据，但是要消耗一个序号。接着，A进入同步已发送状态；</li><li>B收到请求报文段，如果同意建立连接，则向A发送ACK确认报文段，其中<strong>同步位SYN=1，确认号ACK=1，初始序号seq=y，确认号ack=x+1（请求报文段消耗了一个序号）</strong>，这个ACK报文段也不能携带数据，但是要消耗一个序号。与此同时，B进入到同步收到的状态；</li><li>A收到B的确认报文后，还要给B发送确认报文。其中<strong>ACK=1，seq=x+1（上一个报文段的ack），ack = y+1（上一个报文段的seq+1，因为消耗了一个序号）</strong>，这个ACK报文段可以携带数据，但是如果不携带数据则不会消耗序号，下一次A给B发送报文段的初始序号 <strong>seq=1</strong>。此时A进入已建立连接的状态，B收到确认后也进入已建立连接的状态。</li></ul></blockquote><p><strong>为什么需要最后一次确认？</strong></p><blockquote><p>这是防止已失效的连接请求报文段突然又传送到了B而引发错误。</p><p><strong>失效的连接请求：</strong>A第一次先发送了一个请求，但是丢失了，于是A再发送一个连接请求，重新建立连接，发送数据并释放连接。</p><p>但是有可能出现异常情况，即A发送的连接请求并没有丢失，而是滞留了在网络中。如果在传输数据完成之后，这个请求又发到B，B误以为A还要发送数据，因此发送确认报文，但是A没有运输需求，因此不予理睬。如果没有最后一次确认，B一直等待A的确认，这样会造成的浪费。</p><p>采用三报文握手，如果B没有收到A的确认，则可以知道A没有建立连接的需求，就可以避免上述这种情况。</p></blockquote><hr><h3 id="TCP四次挥手的过程？为什么最后有timewait？等待时长一般是多少？"><a href="#TCP四次挥手的过程？为什么最后有timewait？等待时长一般是多少？" class="headerlink" title="TCP四次挥手的过程？为什么最后有timewait？等待时长一般是多少？"></a>TCP四次挥手的过程？为什么最后有timewait？等待时长一般是多少？</h3><p><a href="https://www.cnblogs.com/anzhengyu/p/11232813.html">原博文——TCP运输连接管理</a></p><p><img src="https://i.loli.net/2019/07/25/5d3968b13408d81781.png" alt="5d3968b13408d81781"></p><p><strong>TCP四次挥手的过程：</strong></p><blockquote><ul><li>A和B目前都处于已建立连接的状态，A的应用进程向其TCP发出连接释放报文段，并停止发送数据，主动关闭TCP连接。此时，<strong>FIN=1，seq=u，u等于前面已发送的最后一个字节的序号加1</strong>。这时A进入到FIN-WAIT-1（终止等待1）状态，等待B的确认。FIN报文段即使不携带数据，也要消耗一个序号；</li><li>B收到释放连接后立即发出确认，此时，<strong>ACK=1，确认号是ack=u+1（前面的seq+1，因为消耗了一个序号），序号seq=v，v等于B前面所有已传送数据的最后一个字节的序号加1</strong>。B进入到CLOSE-WAIT（关闭等待）状态，TCP服务器进程向<strong>B的高层应用进程</strong>告知，此时<strong>A到B的连接已经释放</strong>，TCP连接处于半关闭状态。但是，<strong>B到A这个方向的连接尚未关闭；</strong></li><li>A收到B的确认后，就进入到FIN-WAIT2（终止等待2）的状态，等待B发送连接释放报文段；</li><li>若B已经没有数据需要发送，则应用进程通知TCP释放连接，这时B发送的报文段：<strong>FIN=1，ACK=1，seq=w（可能后面又发送了一些数据），ack=u+1，</strong>并且这个报文消耗一个序号。B进入到LAST-ACK（最后确认）的状态，等待A的确认；</li><li>A收到B的确认后，必须对此发送确认报文。该报文中<strong>：ACK=1，seq=u+1，ack=w+1</strong>。然后进入到TIME-WAIT（时间等待）状态。</li><li>此时TCP连接并没有完全释放，必须经过时间等待计时器设置的时间<strong>2MSL</strong>之后，A才进入CLOSED状态。<strong>时间MSL叫做最大报文段寿命</strong>。</li></ul></blockquote><p><strong>那么，为什么要等待2MSL的时间呢？</strong></p><blockquote><ul><li>保证A最后发送的ACK报文段能够到达B。因为这个报文可能丢失，因此B会重传最后一个确认报文段，A再重新发送确认报文，并且重启计时器，直到A，B都能正常进入到CLOSED状态；</li><li>防止上面提到的“已失效的连接请求报文”。这段时间内，这些连接请求报文就可能在网络中消失。</li></ul></blockquote><p>此外，B要比A先进入CLOSED状态</p><hr><h3 id="TCP怎么计算网络延迟？"><a href="#TCP怎么计算网络延迟？" class="headerlink" title="TCP怎么计算网络延迟？"></a>TCP怎么计算网络延迟？</h3><p><a href="https://www.zhihu.com/question/266846392">知乎——计算网络时延的原理是什么？</a></p><p><img src="https://i.loli.net/2019/07/26/5d3a50aed57c293627.png" alt="5d3a50aed57c293627"></p><p>精确的时延计算十分复杂，不过可以通过ping命令进行粗略的计算，通过ping命令得出的平均往返时间除以2，就是我们的网络时延。</p><hr><h3 id="TCP怎么进行拥塞控制？（慢启动、拥塞避免、快重传、快恢复）"><a href="#TCP怎么进行拥塞控制？（慢启动、拥塞避免、快重传、快恢复）" class="headerlink" title="TCP怎么进行拥塞控制？（慢启动、拥塞避免、快重传、快恢复）"></a>TCP怎么进行拥塞控制？（慢启动、拥塞避免、快重传、快恢复）</h3><p><img src="https://i.loli.net/2019/07/26/5d3a5a9e075a842627.png" alt="5d3a5a9e075a842627"></p><p><a href="https://www.cnblogs.com/anzhengyu/p/11232804.html">原博文——TCP的流量控制与拥塞控制</a></p><p>TCP通过<strong>慢启动、拥塞避免、快重传以及快恢复</strong>这四个算法来进行拥塞控制（具体的可以参见上面那篇博文）：</p><blockquote><ul><li><strong>慢启动：</strong>一开始先设置一个比较小的拥塞窗口值cwnd（报文段的倍数），然后进行数据传输，每收到一个报文段的确认，我们就将<strong>cwnd+1</strong>，这样下来，cwnd总体上是乘以<strong>2^n</strong>的倍数增长。（慢启动非增长速度慢，只是增长的初始基数比较小）</li><li><strong>拥塞避免：</strong> 因为慢启动算法的增长比较快，当cwnd = ssthresh（预先设置好的门限值）时，我们启动拥塞避免算法，窗口值开始线性增长。</li></ul><blockquote><p>随着拥塞避免算法的进行，网络出现超时的情况（这时判断为<strong>拥塞出现</strong>）。这时将cwnd降为一开始的值，重新进行<strong>慢开始-拥塞避免</strong>，并且此时的门限值设为出现拥塞时的cwnd的一半。</p></blockquote><ul><li><strong>快重传：</strong> 快重传的目的是为了让发送方尽早知道某个报文段的丢失。如何知道呢？<strong>当我们重复收到某一个报文段的3次确认时，我们就可以判断，它的下一个报文段可能出现了丢失</strong>。这时我们启动快重传算法，立即重传丢失的报文段。</li><li><strong>快恢复：</strong> 上面快重传算法的启动只是因为个别报文段的丢失，我们这时并不判断为网络拥塞，而是启动快恢复算法。我们将cwnd=ssthresh=当前cwnd的一半，并且开始拥塞避免算法。</li></ul><blockquote><p>当然，也有的快恢复算法是将当前拥塞窗口再增大3个报文段的值，因为既然收到了3个重复的ACK，则说明有三个分组已经离开了网络，不在占用网络资源而是停留在对方缓存当中，可以适当将窗口值增大。</p></blockquote></blockquote><hr><h3 id="TCP对应的协议有哪些？UDP对应的协议有哪些？"><a href="#TCP对应的协议有哪些？UDP对应的协议有哪些？" class="headerlink" title="TCP对应的协议有哪些？UDP对应的协议有哪些？"></a>TCP对应的协议有哪些？UDP对应的协议有哪些？</h3><p><img src="https://i.loli.net/2019/07/26/5d3a54340888063337.jpg" alt="5d3a54340888063337"></p><hr><h3 id="面向连接和无连接的区别？"><a href="#面向连接和无连接的区别？" class="headerlink" title="面向连接和无连接的区别？"></a>面向连接和无连接的区别？</h3><p><strong>应该与前面TCP和UDP的区别类似。</strong></p><blockquote><ul><li>面向连接在传输之前需要先建立连接，而且传输完成后必须要释放连接。无连接则不需要事先建立连接，直接传输数据。</li><li>面向连接一般要保证数据传输的可靠性，有序性。</li></ul></blockquote><hr><h3 id="端口以及对应的服务？"><a href="#端口以及对应的服务？" class="headerlink" title="端口以及对应的服务？"></a>端口以及对应的服务？</h3><blockquote><p><strong>端口号分类：</strong></p><ul><li><p>服务器端使用的端口号。</p><blockquote><p><strong>熟知端口号</strong>：0~1023。IANA把一些端口号指派给了TCP/IP最重要的一些程序。当有一些新的应用程序出现后，IANA必须给它指定 一个熟知端口号，否则互联网上的其他应用进程无法和它进行通信。</p><table><thead><tr><th>应用程序</th><th>FTP</th><th align="center">TELNET</th><th align="center">SMTP</th><th align="center">DNS</th><th align="center">TFTP</th><th align="center">HTTP</th><th align="center">SNMP</th><th align="center">SNMP(trap)</th><th align="center">HTTPS</th></tr></thead><tbody><tr><td>熟知端口号</td><td>21</td><td align="center">23</td><td align="center">25</td><td align="center">53</td><td align="center">69</td><td align="center">80</td><td align="center">161</td><td align="center">162</td><td align="center">443</td></tr></tbody></table><p><strong>登记端口号：</strong>1024~49151。这类端口号是为没有熟知端口号的应用程序使用。这类端口号必须在IANA中按照规定的手续进行登记，以防止重复。</p></blockquote></li><li><p>客户端使用的端口号：49152~65535。只有在客户端进程运行时才动态选择，因此又叫短暂端口号。这类端口号留给客户进程选择暂时使用，通信结束后就释放，不再占用。</p></li></ul></blockquote><p>如果对你有帮助，就推荐+收藏吧！😜😜</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件程序设计原则（三）</title>
      <link href="/2020/08/20/ruan-jian-she-ji-yuan-ze-san/"/>
      <url>/2020/08/20/ruan-jian-she-ji-yuan-ze-san/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>软件也像人一样，具有生命力，从出生到死亡，会经历多种变化。软件架构设计也不是一蹴而就的，是不断地演进发展。每个程序员都可以从理解编程原则和模式中受益。</p><p>软件设计原则是一组帮助我们避开不良设计的指导方针。根据Robert Martin的理论，应该避免不良设计的以下三个重要特点：</p><ul><li><strong>僵化</strong>：很难做改动，因为每一个细微的改动都会影响到系统大量的其他功能</li><li><strong>脆弱</strong>：每当你做一次改动，总会引起系统中预期之外的部分出现故障</li><li><strong>死板</strong>：代码很难在其他应用中重用，因其不能从当前应用中单独抽离出来</li></ul><p>下面这些软件设计原则是我从一些书籍和网络中收集而来，并不完整，而且你也需要在一些有“冲突的原则”之间进行权衡和取舍。本文或许会对你的编程、程序设计、讨论或评审工作有所帮助。</p><h2 id="二、通用设计原则"><a href="#二、通用设计原则" class="headerlink" title="二、通用设计原则"></a>二、通用设计原则</h2><h3 id="1-KISS"><a href="#1-KISS" class="headerlink" title="1. KISS"></a>1. KISS</h3><p>所谓KISS原则，即：Keep It Simple,Stupid，指<strong>设计时要坚持简约原则，避免不必要的复杂化，并且易于修改</strong>。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">Everything should be made as simple as possible, but not simpler. - Albert Einstein</font></td></tr></tbody></table><p>简单清晰、功能强大是软件设计最重要的原则和目标。但是软件工程天然错综复杂，而“简单”却没有一个衡量标准，判断和实现一个东西是不是简单，可以通过以下方式来参考。</p><ul><li>让别的软件工程师以一种最容易的方式使用你的方案。</li><li>简单不是走捷径，不是为手边的问题找一个最快的方案。</li><li>当系统变得更庞大更复杂的时候依然能够被理解。</li><li>如果系统无法保持简单，那么我们能做的就是保持各个局部简单，即任何单个的类、模块、应用的设计目标及工作原理都能被快速理解。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black">**我的理解**：保持简单但不能掩盖软件丰富的内涵。即**简约而不简单**！简约是对复杂的事物抽丝剥茧、去除细枝末节显露主要逻辑的过程。就像小时候老师教写文章，要求尽可能用朴实的语言，言简意赅的写出来，但却又要避免语言过于贫乏。软件的“抽象”和它的“直观性”，其实是一对矛盾的关系，软件设计就要保证这两者的平衡。代码抽象过于复杂会陷入“过度设计”不易理解的困境；为了“直观性”缺乏抽象，长此以往又会出现大量的重复、不易于扩展和难维护的困境。</font></td></tr></tbody></table><h3 id="2-DRY"><a href="#2-DRY" class="headerlink" title="2. DRY"></a>2. DRY</h3><p>所谓DRY原则，即：Don’t Repeat Yourself，<strong>不要让自己重复</strong>。</p><p><strong>重复代码是软件程序变烂的万恶之首</strong>。DRY并不是指你不能复制代码，而是你复制的代码不能包含重复的“信息”。复制的东西并不仅仅是复制了代码，而是由于你把同一个信息散播在了代码的各个部分导致了有很多相近的代码也散播在各个地方。代码之所以要写的好，不要重复某些“信息”，因为需求人员总是要改需求，不改代码你就要“死”，改代码你就要加班，所以为了减少修改代码的痛苦，我们不能重复任何信息。举个例子，有一天需求人员说，要把分隔符从分号改成顿号！一下子就要改多个地方了。</p><p>所以，<strong>去掉重复的信息会让你的代码结构发生本质的变化</strong>。</p><p>“重复代码”有很多变体：</p><ul><li>魔法数字、魔法字符串等</li><li>相同代码块</li><li>相似的代码逻辑及操作</li></ul><p>对于消除重复的代码有<strong>事不过三法则</strong>。</p><ul><li>第一次先写了一段代码。</li><li>第二次在另一个地方写了一段相同或相似逻辑的代码，你已经有消除和提取重复代码的冲动了。</li><li>再次在另一个地方写了同样的代码，你已忍无可忍，现在可以考虑抽取和消除重复代码了。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black">我的理解：解决重复的最佳的方式是通过培养良好的编码习惯来避免重复，通过重构的手段来消除重复。发现和解决重复并不困难，通过提取抽象、提取方法等措施就能消除重复，但困难的是立即行动去解决重复，从而不断的磨砺和提升自己的编程技艺，不断将私人代码变成公共代码，这才是自我提升的过程。解决了重复，经过一段时间，你就会发现，你对整个系统的理解程度在不知不觉中提高了不少。</font></td></tr></tbody></table><h3 id="3-Maximize-Cohesion，-Minimize-Coupling"><a href="#3-Maximize-Cohesion，-Minimize-Coupling" class="headerlink" title="3. Maximize Cohesion， Minimize Coupling"></a>3. Maximize Cohesion， Minimize Coupling</h3><p>所谓Maximize Cohesion,Minimize Coupling原则，即：<strong>高内聚低耦合</strong>。这是判断设计好坏的标准，主要是看<strong>模块内的内聚性是否高，模块间的耦合度是否低</strong>。</p><ul><li><strong>耦合性</strong>：也称块间联系。指软件系统结构中各模块间相互联系紧密程度的一种度量。模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。</li><li><strong>内聚性</strong>：又称块内联系。指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。若一个模块内各元素（语名之间、程序段之间）联系的越紧密，则它的内聚性就越高。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。</li></ul><p>内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。</p><p>Java中实现高内聚低耦合的常用方式：</p><ul><li>少使用类的继承，多用接口隐藏实现的细节。</li><li>模块的功能化分尽可能的单一，道理也很简单,功能单一的模块供其它模块调用的机会就少。</li><li>遵循一个定义只在一个地方出现。</li><li>少使用全局变量。</li><li>类属性和方法的声明少用public，多用private关键字，</li><li>多用设计模式，比如采用MVC的设计模式就可以降低界面与业务逻辑的耦合度。</li><li>尽量不用“硬编码”的方式写程序。</li><li>最后当然就是避免直接操作或调用其它模块或类（内容耦合）。</li></ul><h3 id="4-SOC"><a href="#4-SOC" class="headerlink" title="4. SOC"></a>4. SOC</h3><p>所谓SOC原则，即：<strong>关注点分离</strong>（Separation of Concerns）。<strong>不同领域的功能，应该由不同的代码和最小重迭的模块组成</strong>。关注点分离是处理复杂性的一个原则。由于关注点混杂在一起会导致软件程序复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法。关注点分离原则不仅体现在软件程序设计等设计方法中，同时也体现在架构设计、问题求解、软件开发过程、软件项目管理以及软件开发方法学等诸多方面。</p><p>MVC就是关注点分离的一个体现，把业务逻辑、数据、界面分离，这也是组织代码结构的一个形式。MVC的基本结构：</p><ul><li>Model层表示应用程序的数据核心，通常负责在数据库中存取数据。</li><li>View是应用程序的显示层，通常是依据模型的数据而建立。</li><li>Controller是用来控制和处理输入输出的，是处理用户交互的部分，也负责向模型（Model层）发送数据。</li></ul><p>MVC的这个设计各个关注点是分开的，这样有助于我们管理和开发复杂的应用程序，我们可以在某个时间点只集中精力在其中的某一个关注点，而不是所有的部分。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">好的架构必须使每个关注点相互分离，也就是说系统中的一个部分发生了变化，不会影响其他部分。即使需要改变，也能够清晰地识别出那些部分需要改变。如果需要扩展架构，影响将会最小化，已经可以工作的每个部分都将继续工作。——Ivar Jacobson(《AOSD中文版》)</font></td></tr></tbody></table><h3 id="分离方式"><a href="#分离方式" class="headerlink" title="分离方式"></a>分离方式</h3><p>下面将介绍一些分层的思想和方式:</p><ul><li><strong>纵向分离</strong>: 如常见的三层架构（逻辑控制层、业务处理层和数据持久化层）。</li><li><strong>横向分离</strong>: 如把我们的软件拆分成模块或子系统。从左到右是模块1、模块2、模块3，这是一种水平方向的切割。这跟纵向的分离是两个不同的方向，横向分离大多是模块化的过程。</li><li><strong>切面分离</strong>: 有些内容是多个层之间都需要的，比如日志（log），在你的系统里面，界面层、逻辑层、数据访问层可能都需要写日志，这种跨到多层同样逻辑就可以考虑切面分离。</li><li><strong>依赖方向分离</strong>: 按依赖方向考虑，决定某个类应该放在哪个层次里面，或者考虑将某一层切割成多层。</li><li><strong>关注数据分离</strong>: 在组织数据时，应该尽量考虑数据本身的固有属性，如果不是它们的固有属性，那么应该分离出来。比如产品的类就不应该关联customer类，应该是用订单类来把他们联系在一起。</li><li><strong>关注行为分离</strong>: 行为也应该是事物或对象的固有的本身的行为，明显偏离原来行为的，应该考虑成另外的关注点儿分离开。比如有一个函数叫做CreateNewCustomer()，那么CreateNewCustomer()的行为就应该限定在创建一个新客户上面，给新客户自动发优惠券的动作就不能放到这个函数里面。</li><li><strong>扩展分离</strong>: 如果基于某种设计，原先不具有某些行为需要增加，可以考虑通过扩展或插件的形式来完成，将这些功能放入到插件或扩展中。</li><li><strong>反转分离</strong>: 很多依赖注入的框架，如Spring、Guice等等，这些帮助我们做依赖反转，从而倒置依赖关系</li></ul><h3 id="5-YAGNI"><a href="#5-YAGNI" class="headerlink" title="5. YAGNI"></a>5. YAGNI</h3><p>所谓YAGNI原则，即：You Ain’t Gonna Need It，<strong>你不需要它</strong>。它是一种极限编程（XP）实践，表示程序员不应为目前还不需要的功能编写代码。YAGNI很像KISS原则，因为它也是致力于构建简单的方案。然而，KISS是通过尽可能容易的完成某件事情来实现精简方案；但YAGNI是通过根本就不实现它来达到精简。YAGNI的观点是你应该<strong>为了眼前的需求做设计而不是未来</strong>。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">只在真正需要某些功能的时候才去实现它，而不是仅仅因为你预见到它将出现。- XP的联合创始人Ron Jeffries</font></td></tr></tbody></table><p>即使你非常确信将来你需要某个特性，也不要现在就去实现它。在很多情况下，你会发现或许最终你不需要它了，或者是你真正所需的特性与你之前预计的有很大的出入。遵循 YAGNI 实践有两个主要原因：</p><ul><li>你节约了时间，因为你避免了编写最终证明不必要的代码。</li><li>你的代码质量更高了，因为你使代码不必为你的“推测”所污染，而这些“推测”最终可能或多或少有些错误，但此时这些错误已牢牢地依附在你的代码中了。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black"> **我的理解** ：YAGNI 原则，本质上是告诫我们**写代码不要画蛇添足，否则就会弄巧成拙了**。编写业务代码时，不要去假想一些需求或者场景，因为大多数你所设想的场景都不会发生，而你所多写的那些代码也将会长期滞留在你的系统中，收效甚微，但却让你和团队花费了更多的时间和精力去书写和维护，更可怕的是可能会对将来新的代码维护人造成困惑。另外对于没有被使用到的代码，我认为也都应该立即删除，从而保持系统的精简，如果将来需要时再去书写或恢复，而且那时侯写出的代码也绝对比之前的更为契合。</font></td></tr></tbody></table><h3 id="6-Boy-Scout-Rule"><a href="#6-Boy-Scout-Rule" class="headerlink" title="6. Boy-Scout Rule"></a>6. Boy-Scout Rule</h3><p>Boy-Scout Rule，译为：<strong>童子军规则</strong>。美国童子军有一个简单的规则：“让营地比你刚来时更干净(Always leave the campground cleaner than you found it)”。如果看到地上有垃圾，不管是谁扔的，都要清理。这样你就有意地为下一批来宿营的人改善了环境。</p><p>童子军规则告诉我们在对现有代码库进行更改时，代码质量往往会降低，从而积累技术债务。所以需要始终保持代码整洁。不管原作者是谁，如果我们努力去改进代码模块，不管是多么小的改进，我们的软件系统就再也不会持续变坏了。取而代之的是，系统在发展的同时会逐渐变得更好。我们也会看到团队们关心整体的系统，而不是各自只关心自己负责的一小部分。而且团队成员要互助，互相清理代码，他们遵从童子军规则，因为那对每个人都很好，而不仅仅是对自己好。</p><p>关于童子军规则中所提倡的<strong>对代码坏味道的尽早修复</strong>，我也想起来了我们所熟知的<strong>“破窗效应</strong>”和<strong>“讳疾忌医”</strong>的典故：</p><h3 id="破窗效应"><a href="#破窗效应" class="headerlink" title="破窗效应"></a>破窗效应</h3><table><tbody><tr><td bgcolor="lightblue"><font color="black">如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些示范性的纵容去打烂更多的窗户。久而久之，这些破窗户就给人造成一种无序的感觉，结果在这种公众麻木不仁的氛围中，犯罪就会滋生、猖獗。——政治学家威尔逊和犯罪学家凯琳提出的“破窗效应”理论</font></td></tr></tbody></table><ul><li>“环境早就脏了，我扔的这点儿垃圾根本起不到关键性作用。”</li><li>“这个代码以前的其他人也都是这样写的。”</li><li>“反正也不是只有我才这么写代码的。”</li></ul><p>不少人会像上面这样辩解自己的过错。其实，这些说法根本站不住脚，错了就是错了，影响的大小并不能改变行为错误的本质，别人的错误更不会是证明你无错的理由。任何一种不良现象的存在，都有可能传递一种错误信息。进而导致更坏的后果，正所谓“<strong>千里之堤，溃于蚁穴”、勿以善小而不为，勿以恶小而为之</strong>。</p><h3 id="讳疾忌医的典故"><a href="#讳疾忌医的典故" class="headerlink" title="讳疾忌医的典故"></a>讳疾忌医的典故</h3><p>《扁鹊见蔡桓公》的故事，我们从小就学习了，告诉我们不能盲目相信自己，不能讳疾忌医。但想想我们自己代码的坏味道和bug，也是如出一辙。</p><p>代码坏味道或者糟糕的程序代码就像隐形的“疾病”一样潜伏在项目中，也因此形成了技术债务。如果这些“疾病”在项目初期不引起注关注、不把疾病扼杀在萌芽之中，那么后期修复它的代价也就越大，也必然会使得项目的软件程序越来越难以维护，这个项目也最终会像蔡桓公一样无药可治、“无奈何也”。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">所以，请记住童子军规则对我们的启示：**始终保持代码整洁，勿以善小而不为，勿以恶小而为之，有病早治**。</font></td></tr></tbody></table><h3 id="其他原则："><a href="#其他原则：" class="headerlink" title="其他原则："></a>其他原则：</h3><ul><li>避免过早优化（Avoid Premature Optimization）: 除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。“过早的优化是一切罪恶之源。”——Donald Knuth</li><li>最小惊讶原则(Principle of least astonishment): 代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。</li><li>代码重用原则（Code Reuse is Good）: 重用代码能提高代码的可读性，缩短开发时间。</li><li>别让我思考(Don’t Make Me Think): 所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。</li><li>为维护者写代码(Write Code for the Maintainer): 优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。“如果一个维护者不再继续维护你的代码，很可能他就有了想杀你的冲动。”</li><li>正交原则(Orthogonality): 正交性的基本思想是，在概念上不相关的事物不应该与系统相关。设计越正交，异常越少。 这使得用编程语言更容易学习，读写程序。(反例：CSS)。</li><li>做最简单的事儿就让代码可运行（Do the simplest thing that could possibly work）: 尽可能做最简单的事就可以让代码可运行。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。</li><li>隐藏实现细节（Hide Implementation Details）: 软件模块通过提供接口隐藏信息（即实现细节），而不泄漏任何不必要的信息。</li><li>科里定律(Curly’s Law): 是为任何特定的代码选择一个明确定义的目标：只做一件事。</li><li>墨菲定律（Murphy’s Law）:根本内容是：如果事情有变坏的可能，不管这种可能性有多小，它总会发生。主要内容如下：<br>&nbsp;&nbsp; - 任何事都没有表面看起来那么简单；<br>&nbsp;&nbsp; - 所有的事都会比你预计的时间长；<br>&nbsp;&nbsp; - 会出错的事总会出错；<br>&nbsp;&nbsp; - 如果你担心某种情况发生，那么它就更有可能发生。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件程序设计原则（二）</title>
      <link href="/2020/08/17/ruan-jian-she-ji-yuan-ze-er/"/>
      <url>/2020/08/17/ruan-jian-she-ji-yuan-ze-er/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>软件也像人一样，具有生命力，从出生到死亡，会经历多种变化。软件架构设计也不是一蹴而就的，是不断地演进发展。每个程序员都可以从理解编程原则和模式中受益。</p><p>软件设计原则是一组帮助我们避开不良设计的指导方针。根据Robert Martin的理论，应该避免不良设计的以下三个重要特点：</p><ul><li><strong>僵化</strong>：很难做改动，因为每一个细微的改动都会影响到系统大量的其他功能</li><li><strong>脆弱</strong>：每当你做一次改动，总会引起系统中预期之外的部分出现故障</li><li><strong>死板</strong>：代码很难在其他应用中重用，因其不能从当前应用中单独抽离出来</li></ul><p>下面这些软件设计原则是我从一些书籍和网络中收集而来，并不完整，而且你也需要在一些有“冲突的原则”之间进行权衡和取舍。本文或许会对你的编程、程序设计、讨论或评审工作有所帮助。</p><h2 id="二、通用设计原则"><a href="#二、通用设计原则" class="headerlink" title="二、通用设计原则"></a>二、通用设计原则</h2><h3 id="1-KISS"><a href="#1-KISS" class="headerlink" title="1. KISS"></a>1. KISS</h3><p>所谓KISS原则，即：Keep It Simple,Stupid，指<strong>设计时要坚持简约原则，避免不必要的复杂化，并且易于修改</strong>。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">Everything should be made as simple as possible, but not simpler. - Albert Einstein</font></td></tr></tbody></table><p>简单清晰、功能强大是软件设计最重要的原则和目标。但是软件工程天然错综复杂，而“简单”却没有一个衡量标准，判断和实现一个东西是不是简单，可以通过以下方式来参考。</p><ul><li>让别的软件工程师以一种最容易的方式使用你的方案。</li><li>简单不是走捷径，不是为手边的问题找一个最快的方案。</li><li>当系统变得更庞大更复杂的时候依然能够被理解。</li><li>如果系统无法保持简单，那么我们能做的就是保持各个局部简单，即任何单个的类、模块、应用的设计目标及工作原理都能被快速理解。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black">**我的理解**：保持简单但不能掩盖软件丰富的内涵。即**简约而不简单**！简约是对复杂的事物抽丝剥茧、去除细枝末节显露主要逻辑的过程。就像小时候老师教写文章，要求尽可能用朴实的语言，言简意赅的写出来，但却又要避免语言过于贫乏。软件的“抽象”和它的“直观性”，其实是一对矛盾的关系，软件设计就要保证这两者的平衡。代码抽象过于复杂会陷入“过度设计”不易理解的困境；为了“直观性”缺乏抽象，长此以往又会出现大量的重复、不易于扩展和难维护的困境。</font></td></tr></tbody></table><h3 id="2-DRY"><a href="#2-DRY" class="headerlink" title="2. DRY"></a>2. DRY</h3><p>所谓DRY原则，即：Don’t Repeat Yourself，<strong>不要让自己重复</strong>。</p><p><strong>重复代码是软件程序变烂的万恶之首</strong>。DRY并不是指你不能复制代码，而是你复制的代码不能包含重复的“信息”。复制的东西并不仅仅是复制了代码，而是由于你把同一个信息散播在了代码的各个部分导致了有很多相近的代码也散播在各个地方。代码之所以要写的好，不要重复某些“信息”，因为需求人员总是要改需求，不改代码你就要“死”，改代码你就要加班，所以为了减少修改代码的痛苦，我们不能重复任何信息。举个例子，有一天需求人员说，要把分隔符从分号改成顿号！一下子就要改多个地方了。</p><p>所以，<strong>去掉重复的信息会让你的代码结构发生本质的变化</strong>。</p><p>“重复代码”有很多变体：</p><ul><li>魔法数字、魔法字符串等</li><li>相同代码块</li><li>相似的代码逻辑及操作</li></ul><p>对于消除重复的代码有<strong>事不过三法则</strong>。</p><ul><li>第一次先写了一段代码。</li><li>第二次在另一个地方写了一段相同或相似逻辑的代码，你已经有消除和提取重复代码的冲动了。</li><li>再次在另一个地方写了同样的代码，你已忍无可忍，现在可以考虑抽取和消除重复代码了。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black">我的理解：解决重复的最佳的方式是通过培养良好的编码习惯来避免重复，通过重构的手段来消除重复。发现和解决重复并不困难，通过提取抽象、提取方法等措施就能消除重复，但困难的是立即行动去解决重复，从而不断的磨砺和提升自己的编程技艺，不断将私人代码变成公共代码，这才是自我提升的过程。解决了重复，经过一段时间，你就会发现，你对整个系统的理解程度在不知不觉中提高了不少。</font></td></tr></tbody></table><h3 id="3-Maximize-Cohesion，-Minimize-Coupling"><a href="#3-Maximize-Cohesion，-Minimize-Coupling" class="headerlink" title="3. Maximize Cohesion， Minimize Coupling"></a>3. Maximize Cohesion， Minimize Coupling</h3><p>所谓Maximize Cohesion,Minimize Coupling原则，即：<strong>高内聚低耦合</strong>。这是判断设计好坏的标准，主要是看<strong>模块内的内聚性是否高，模块间的耦合度是否低</strong>。</p><ul><li><strong>耦合性</strong>：也称块间联系。指软件系统结构中各模块间相互联系紧密程度的一种度量。模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。</li><li><strong>内聚性</strong>：又称块内联系。指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。若一个模块内各元素（语名之间、程序段之间）联系的越紧密，则它的内聚性就越高。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。</li></ul><p>内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。</p><p>Java中实现高内聚低耦合的常用方式：</p><ul><li>少使用类的继承，多用接口隐藏实现的细节。</li><li>模块的功能化分尽可能的单一，道理也很简单,功能单一的模块供其它模块调用的机会就少。</li><li>遵循一个定义只在一个地方出现。</li><li>少使用全局变量。</li><li>类属性和方法的声明少用public，多用private关键字，</li><li>多用设计模式，比如采用MVC的设计模式就可以降低界面与业务逻辑的耦合度。</li><li>尽量不用“硬编码”的方式写程序。</li><li>最后当然就是避免直接操作或调用其它模块或类（内容耦合）。</li></ul><h3 id="4-SOC"><a href="#4-SOC" class="headerlink" title="4. SOC"></a>4. SOC</h3><p>所谓SOC原则，即：<strong>关注点分离</strong>（Separation of Concerns）。<strong>不同领域的功能，应该由不同的代码和最小重迭的模块组成</strong>。关注点分离是处理复杂性的一个原则。由于关注点混杂在一起会导致软件程序复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法。关注点分离原则不仅体现在软件程序设计等设计方法中，同时也体现在架构设计、问题求解、软件开发过程、软件项目管理以及软件开发方法学等诸多方面。</p><p>MVC就是关注点分离的一个体现，把业务逻辑、数据、界面分离，这也是组织代码结构的一个形式。MVC的基本结构：</p><ul><li>Model层表示应用程序的数据核心，通常负责在数据库中存取数据。</li><li>View是应用程序的显示层，通常是依据模型的数据而建立。</li><li>Controller是用来控制和处理输入输出的，是处理用户交互的部分，也负责向模型（Model层）发送数据。</li></ul><p>MVC的这个设计各个关注点是分开的，这样有助于我们管理和开发复杂的应用程序，我们可以在某个时间点只集中精力在其中的某一个关注点，而不是所有的部分。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">好的架构必须使每个关注点相互分离，也就是说系统中的一个部分发生了变化，不会影响其他部分。即使需要改变，也能够清晰地识别出那些部分需要改变。如果需要扩展架构，影响将会最小化，已经可以工作的每个部分都将继续工作。——Ivar Jacobson(《AOSD中文版》)</font></td></tr></tbody></table><h3 id="分离方式"><a href="#分离方式" class="headerlink" title="分离方式"></a>分离方式</h3><p>下面将介绍一些分层的思想和方式:</p><ul><li><strong>纵向分离</strong>: 如常见的三层架构（逻辑控制层、业务处理层和数据持久化层）。</li><li><strong>横向分离</strong>: 如把我们的软件拆分成模块或子系统。从左到右是模块1、模块2、模块3，这是一种水平方向的切割。这跟纵向的分离是两个不同的方向，横向分离大多是模块化的过程。</li><li><strong>切面分离</strong>: 有些内容是多个层之间都需要的，比如日志（log），在你的系统里面，界面层、逻辑层、数据访问层可能都需要写日志，这种跨到多层同样逻辑就可以考虑切面分离。</li><li><strong>依赖方向分离</strong>: 按依赖方向考虑，决定某个类应该放在哪个层次里面，或者考虑将某一层切割成多层。</li><li><strong>关注数据分离</strong>: 在组织数据时，应该尽量考虑数据本身的固有属性，如果不是它们的固有属性，那么应该分离出来。比如产品的类就不应该关联customer类，应该是用订单类来把他们联系在一起。</li><li><strong>关注行为分离</strong>: 行为也应该是事物或对象的固有的本身的行为，明显偏离原来行为的，应该考虑成另外的关注点儿分离开。比如有一个函数叫做CreateNewCustomer()，那么CreateNewCustomer()的行为就应该限定在创建一个新客户上面，给新客户自动发优惠券的动作就不能放到这个函数里面。</li><li><strong>扩展分离</strong>: 如果基于某种设计，原先不具有某些行为需要增加，可以考虑通过扩展或插件的形式来完成，将这些功能放入到插件或扩展中。</li><li><strong>反转分离</strong>: 很多依赖注入的框架，如Spring、Guice等等，这些帮助我们做依赖反转，从而倒置依赖关系</li></ul><h3 id="5-YAGNI"><a href="#5-YAGNI" class="headerlink" title="5. YAGNI"></a>5. YAGNI</h3><p>所谓YAGNI原则，即：You Ain’t Gonna Need It，<strong>你不需要它</strong>。它是一种极限编程（XP）实践，表示程序员不应为目前还不需要的功能编写代码。YAGNI很像KISS原则，因为它也是致力于构建简单的方案。然而，KISS是通过尽可能容易的完成某件事情来实现精简方案；但YAGNI是通过根本就不实现它来达到精简。YAGNI的观点是你应该<strong>为了眼前的需求做设计而不是未来</strong>。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">只在真正需要某些功能的时候才去实现它，而不是仅仅因为你预见到它将出现。- XP的联合创始人Ron Jeffries</font></td></tr></tbody></table><p>即使你非常确信将来你需要某个特性，也不要现在就去实现它。在很多情况下，你会发现或许最终你不需要它了，或者是你真正所需的特性与你之前预计的有很大的出入。遵循 YAGNI 实践有两个主要原因：</p><ul><li>你节约了时间，因为你避免了编写最终证明不必要的代码。</li><li>你的代码质量更高了，因为你使代码不必为你的“推测”所污染，而这些“推测”最终可能或多或少有些错误，但此时这些错误已牢牢地依附在你的代码中了。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black"> **我的理解** ：YAGNI 原则，本质上是告诫我们**写代码不要画蛇添足，否则就会弄巧成拙了**。编写业务代码时，不要去假想一些需求或者场景，因为大多数你所设想的场景都不会发生，而你所多写的那些代码也将会长期滞留在你的系统中，收效甚微，但却让你和团队花费了更多的时间和精力去书写和维护，更可怕的是可能会对将来新的代码维护人造成困惑。另外对于没有被使用到的代码，我认为也都应该立即删除，从而保持系统的精简，如果将来需要时再去书写或恢复，而且那时侯写出的代码也绝对比之前的更为契合。</font></td></tr></tbody></table><h3 id="6-Boy-Scout-Rule"><a href="#6-Boy-Scout-Rule" class="headerlink" title="6. Boy-Scout Rule"></a>6. Boy-Scout Rule</h3><p>Boy-Scout Rule，译为：<strong>童子军规则</strong>。美国童子军有一个简单的规则：“让营地比你刚来时更干净(Always leave the campground cleaner than you found it)”。如果看到地上有垃圾，不管是谁扔的，都要清理。这样你就有意地为下一批来宿营的人改善了环境。</p><p>童子军规则告诉我们在对现有代码库进行更改时，代码质量往往会降低，从而积累技术债务。所以需要始终保持代码整洁。不管原作者是谁，如果我们努力去改进代码模块，不管是多么小的改进，我们的软件系统就再也不会持续变坏了。取而代之的是，系统在发展的同时会逐渐变得更好。我们也会看到团队们关心整体的系统，而不是各自只关心自己负责的一小部分。而且团队成员要互助，互相清理代码，他们遵从童子军规则，因为那对每个人都很好，而不仅仅是对自己好。</p><p>关于童子军规则中所提倡的<strong>对代码坏味道的尽早修复</strong>，我也想起来了我们所熟知的<strong>“破窗效应</strong>”和<strong>“讳疾忌医”</strong>的典故：</p><h3 id="破窗效应"><a href="#破窗效应" class="headerlink" title="破窗效应"></a>破窗效应</h3><table><tbody><tr><td bgcolor="lightblue"><font color="black">如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些示范性的纵容去打烂更多的窗户。久而久之，这些破窗户就给人造成一种无序的感觉，结果在这种公众麻木不仁的氛围中，犯罪就会滋生、猖獗。——政治学家威尔逊和犯罪学家凯琳提出的“破窗效应”理论</font></td></tr></tbody></table><ul><li>“环境早就脏了，我扔的这点儿垃圾根本起不到关键性作用。”</li><li>“这个代码以前的其他人也都是这样写的。”</li><li>“反正也不是只有我才这么写代码的。”</li></ul><p>不少人会像上面这样辩解自己的过错。其实，这些说法根本站不住脚，错了就是错了，影响的大小并不能改变行为错误的本质，别人的错误更不会是证明你无错的理由。任何一种不良现象的存在，都有可能传递一种错误信息。进而导致更坏的后果，正所谓“<strong>千里之堤，溃于蚁穴”、勿以善小而不为，勿以恶小而为之</strong>。</p><h3 id="讳疾忌医的典故"><a href="#讳疾忌医的典故" class="headerlink" title="讳疾忌医的典故"></a>讳疾忌医的典故</h3><p>《扁鹊见蔡桓公》的故事，我们从小就学习了，告诉我们不能盲目相信自己，不能讳疾忌医。但想想我们自己代码的坏味道和bug，也是如出一辙。</p><p>代码坏味道或者糟糕的程序代码就像隐形的“疾病”一样潜伏在项目中，也因此形成了技术债务。如果这些“疾病”在项目初期不引起注关注、不把疾病扼杀在萌芽之中，那么后期修复它的代价也就越大，也必然会使得项目的软件程序越来越难以维护，这个项目也最终会像蔡桓公一样无药可治、“无奈何也”。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">所以，请记住童子军规则对我们的启示：**始终保持代码整洁，勿以善小而不为，勿以恶小而为之，有病早治**。</font></td></tr></tbody></table><h3 id="其他原则："><a href="#其他原则：" class="headerlink" title="其他原则："></a>其他原则：</h3><ul><li>避免过早优化（Avoid Premature Optimization）: 除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。“过早的优化是一切罪恶之源。”——Donald Knuth</li><li>最小惊讶原则(Principle of least astonishment): 代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。</li><li>代码重用原则（Code Reuse is Good）: 重用代码能提高代码的可读性，缩短开发时间。</li><li>别让我思考(Don’t Make Me Think): 所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。</li><li>为维护者写代码(Write Code for the Maintainer): 优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。“如果一个维护者不再继续维护你的代码，很可能他就有了想杀你的冲动。”</li><li>正交原则(Orthogonality): 正交性的基本思想是，在概念上不相关的事物不应该与系统相关。设计越正交，异常越少。 这使得用编程语言更容易学习，读写程序。(反例：CSS)。</li><li>做最简单的事儿就让代码可运行（Do the simplest thing that could possibly work）: 尽可能做最简单的事就可以让代码可运行。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。</li><li>隐藏实现细节（Hide Implementation Details）: 软件模块通过提供接口隐藏信息（即实现细节），而不泄漏任何不必要的信息。</li><li>科里定律(Curly’s Law): 是为任何特定的代码选择一个明确定义的目标：只做一件事。</li><li>墨菲定律（Murphy’s Law）:根本内容是：如果事情有变坏的可能，不管这种可能性有多小，它总会发生。主要内容如下：<br>&nbsp;&nbsp; - 任何事都没有表面看起来那么简单；<br>&nbsp;&nbsp; - 所有的事都会比你预计的时间长；<br>&nbsp;&nbsp; - 会出错的事总会出错；<br>&nbsp;&nbsp; - 如果你担心某种情况发生，那么它就更有可能发生。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件程序设计原则（一）</title>
      <link href="/2020/08/13/ruan-jian-she-ji-yuan-ze-yi/"/>
      <url>/2020/08/13/ruan-jian-she-ji-yuan-ze-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>软件也像人一样，具有生命力，从出生到死亡，会经历多种变化。软件架构设计也不是一蹴而就的，是不断地演进发展。每个程序员都可以从理解编程原则和模式中受益。</p><p>软件设计原则是一组帮助我们避开不良设计的指导方针。根据Robert Martin的理论，应该避免不良设计的以下三个重要特点：</p><ul><li><strong>僵化</strong>：很难做改动，因为每一个细微的改动都会影响到系统大量的其他功能</li><li><strong>脆弱</strong>：每当你做一次改动，总会引起系统中预期之外的部分出现故障</li><li><strong>死板</strong>：代码很难在其他应用中重用，因其不能从当前应用中单独抽离出来</li></ul><p>下面这些软件设计原则是我从一些书籍和网络中收集而来，并不完整，而且你也需要在一些有“冲突的原则”之间进行权衡和取舍。本文或许会对你的编程、程序设计、讨论或评审工作有所帮助。</p><h2 id="二、通用设计原则"><a href="#二、通用设计原则" class="headerlink" title="二、通用设计原则"></a>二、通用设计原则</h2><h3 id="1-KISS"><a href="#1-KISS" class="headerlink" title="1. KISS"></a>1. KISS</h3><p>所谓KISS原则，即：Keep It Simple,Stupid，指<strong>设计时要坚持简约原则，避免不必要的复杂化，并且易于修改</strong>。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">Everything should be made as simple as possible, but not simpler. - Albert Einstein</font></td></tr></tbody></table><p>简单清晰、功能强大是软件设计最重要的原则和目标。但是软件工程天然错综复杂，而“简单”却没有一个衡量标准，判断和实现一个东西是不是简单，可以通过以下方式来参考。</p><ul><li>让别的软件工程师以一种最容易的方式使用你的方案。</li><li>简单不是走捷径，不是为手边的问题找一个最快的方案。</li><li>当系统变得更庞大更复杂的时候依然能够被理解。</li><li>如果系统无法保持简单，那么我们能做的就是保持各个局部简单，即任何单个的类、模块、应用的设计目标及工作原理都能被快速理解。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black">**我的理解**：保持简单但不能掩盖软件丰富的内涵。即**简约而不简单**！简约是对复杂的事物抽丝剥茧、去除细枝末节显露主要逻辑的过程。就像小时候老师教写文章，要求尽可能用朴实的语言，言简意赅的写出来，但却又要避免语言过于贫乏。软件的“抽象”和它的“直观性”，其实是一对矛盾的关系，软件设计就要保证这两者的平衡。代码抽象过于复杂会陷入“过度设计”不易理解的困境；为了“直观性”缺乏抽象，长此以往又会出现大量的重复、不易于扩展和难维护的困境。</font></td></tr></tbody></table><h3 id="2-DRY"><a href="#2-DRY" class="headerlink" title="2. DRY"></a>2. DRY</h3><p>所谓DRY原则，即：Don’t Repeat Yourself，<strong>不要让自己重复</strong>。</p><p><strong>重复代码是软件程序变烂的万恶之首</strong>。DRY并不是指你不能复制代码，而是你复制的代码不能包含重复的“信息”。复制的东西并不仅仅是复制了代码，而是由于你把同一个信息散播在了代码的各个部分导致了有很多相近的代码也散播在各个地方。代码之所以要写的好，不要重复某些“信息”，因为需求人员总是要改需求，不改代码你就要“死”，改代码你就要加班，所以为了减少修改代码的痛苦，我们不能重复任何信息。举个例子，有一天需求人员说，要把分隔符从分号改成顿号！一下子就要改多个地方了。</p><p>所以，<strong>去掉重复的信息会让你的代码结构发生本质的变化</strong>。</p><p>“重复代码”有很多变体：</p><ul><li>魔法数字、魔法字符串等</li><li>相同代码块</li><li>相似的代码逻辑及操作</li></ul><p>对于消除重复的代码有<strong>事不过三法则</strong>。</p><ul><li>第一次先写了一段代码。</li><li>第二次在另一个地方写了一段相同或相似逻辑的代码，你已经有消除和提取重复代码的冲动了。</li><li>再次在另一个地方写了同样的代码，你已忍无可忍，现在可以考虑抽取和消除重复代码了。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black">我的理解：解决重复的最佳的方式是通过培养良好的编码习惯来避免重复，通过重构的手段来消除重复。发现和解决重复并不困难，通过提取抽象、提取方法等措施就能消除重复，但困难的是立即行动去解决重复，从而不断的磨砺和提升自己的编程技艺，不断将私人代码变成公共代码，这才是自我提升的过程。解决了重复，经过一段时间，你就会发现，你对整个系统的理解程度在不知不觉中提高了不少。</font></td></tr></tbody></table><h3 id="3-Maximize-Cohesion，-Minimize-Coupling"><a href="#3-Maximize-Cohesion，-Minimize-Coupling" class="headerlink" title="3. Maximize Cohesion， Minimize Coupling"></a>3. Maximize Cohesion， Minimize Coupling</h3><p>所谓Maximize Cohesion,Minimize Coupling原则，即：<strong>高内聚低耦合</strong>。这是判断设计好坏的标准，主要是看<strong>模块内的内聚性是否高，模块间的耦合度是否低</strong>。</p><ul><li><strong>耦合性</strong>：也称块间联系。指软件系统结构中各模块间相互联系紧密程度的一种度量。模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。</li><li><strong>内聚性</strong>：又称块内联系。指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。若一个模块内各元素（语名之间、程序段之间）联系的越紧密，则它的内聚性就越高。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。</li></ul><p>内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。</p><p>Java中实现高内聚低耦合的常用方式：</p><ul><li>少使用类的继承，多用接口隐藏实现的细节。</li><li>模块的功能化分尽可能的单一，道理也很简单,功能单一的模块供其它模块调用的机会就少。</li><li>遵循一个定义只在一个地方出现。</li><li>少使用全局变量。</li><li>类属性和方法的声明少用public，多用private关键字，</li><li>多用设计模式，比如采用MVC的设计模式就可以降低界面与业务逻辑的耦合度。</li><li>尽量不用“硬编码”的方式写程序。</li><li>最后当然就是避免直接操作或调用其它模块或类（内容耦合）。</li></ul><h3 id="4-SOC"><a href="#4-SOC" class="headerlink" title="4. SOC"></a>4. SOC</h3><p>所谓SOC原则，即：<strong>关注点分离</strong>（Separation of Concerns）。<strong>不同领域的功能，应该由不同的代码和最小重迭的模块组成</strong>。关注点分离是处理复杂性的一个原则。由于关注点混杂在一起会导致软件程序复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法。关注点分离原则不仅体现在软件程序设计等设计方法中，同时也体现在架构设计、问题求解、软件开发过程、软件项目管理以及软件开发方法学等诸多方面。</p><p>MVC就是关注点分离的一个体现，把业务逻辑、数据、界面分离，这也是组织代码结构的一个形式。MVC的基本结构：</p><ul><li>Model层表示应用程序的数据核心，通常负责在数据库中存取数据。</li><li>View是应用程序的显示层，通常是依据模型的数据而建立。</li><li>Controller是用来控制和处理输入输出的，是处理用户交互的部分，也负责向模型（Model层）发送数据。</li></ul><p>MVC的这个设计各个关注点是分开的，这样有助于我们管理和开发复杂的应用程序，我们可以在某个时间点只集中精力在其中的某一个关注点，而不是所有的部分。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">好的架构必须使每个关注点相互分离，也就是说系统中的一个部分发生了变化，不会影响其他部分。即使需要改变，也能够清晰地识别出那些部分需要改变。如果需要扩展架构，影响将会最小化，已经可以工作的每个部分都将继续工作。——Ivar Jacobson(《AOSD中文版》)</font></td></tr></tbody></table><h3 id="分离方式"><a href="#分离方式" class="headerlink" title="分离方式"></a>分离方式</h3><p>下面将介绍一些分层的思想和方式:</p><ul><li><strong>纵向分离</strong>: 如常见的三层架构（逻辑控制层、业务处理层和数据持久化层）。</li><li><strong>横向分离</strong>: 如把我们的软件拆分成模块或子系统。从左到右是模块1、模块2、模块3，这是一种水平方向的切割。这跟纵向的分离是两个不同的方向，横向分离大多是模块化的过程。</li><li><strong>切面分离</strong>: 有些内容是多个层之间都需要的，比如日志（log），在你的系统里面，界面层、逻辑层、数据访问层可能都需要写日志，这种跨到多层同样逻辑就可以考虑切面分离。</li><li><strong>依赖方向分离</strong>: 按依赖方向考虑，决定某个类应该放在哪个层次里面，或者考虑将某一层切割成多层。</li><li><strong>关注数据分离</strong>: 在组织数据时，应该尽量考虑数据本身的固有属性，如果不是它们的固有属性，那么应该分离出来。比如产品的类就不应该关联customer类，应该是用订单类来把他们联系在一起。</li><li><strong>关注行为分离</strong>: 行为也应该是事物或对象的固有的本身的行为，明显偏离原来行为的，应该考虑成另外的关注点儿分离开。比如有一个函数叫做CreateNewCustomer()，那么CreateNewCustomer()的行为就应该限定在创建一个新客户上面，给新客户自动发优惠券的动作就不能放到这个函数里面。</li><li><strong>扩展分离</strong>: 如果基于某种设计，原先不具有某些行为需要增加，可以考虑通过扩展或插件的形式来完成，将这些功能放入到插件或扩展中。</li><li><strong>反转分离</strong>: 很多依赖注入的框架，如Spring、Guice等等，这些帮助我们做依赖反转，从而倒置依赖关系</li></ul><h3 id="5-YAGNI"><a href="#5-YAGNI" class="headerlink" title="5. YAGNI"></a>5. YAGNI</h3><p>所谓YAGNI原则，即：You Ain’t Gonna Need It，<strong>你不需要它</strong>。它是一种极限编程（XP）实践，表示程序员不应为目前还不需要的功能编写代码。YAGNI很像KISS原则，因为它也是致力于构建简单的方案。然而，KISS是通过尽可能容易的完成某件事情来实现精简方案；但YAGNI是通过根本就不实现它来达到精简。YAGNI的观点是你应该<strong>为了眼前的需求做设计而不是未来</strong>。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">只在真正需要某些功能的时候才去实现它，而不是仅仅因为你预见到它将出现。- XP的联合创始人Ron Jeffries</font></td></tr></tbody></table><p>即使你非常确信将来你需要某个特性，也不要现在就去实现它。在很多情况下，你会发现或许最终你不需要它了，或者是你真正所需的特性与你之前预计的有很大的出入。遵循 YAGNI 实践有两个主要原因：</p><ul><li>你节约了时间，因为你避免了编写最终证明不必要的代码。</li><li>你的代码质量更高了，因为你使代码不必为你的“推测”所污染，而这些“推测”最终可能或多或少有些错误，但此时这些错误已牢牢地依附在你的代码中了。</li></ul><table><tbody><tr><td bgcolor="lightblue"><font color="black"> **我的理解** ：YAGNI 原则，本质上是告诫我们**写代码不要画蛇添足，否则就会弄巧成拙了**。编写业务代码时，不要去假想一些需求或者场景，因为大多数你所设想的场景都不会发生，而你所多写的那些代码也将会长期滞留在你的系统中，收效甚微，但却让你和团队花费了更多的时间和精力去书写和维护，更可怕的是可能会对将来新的代码维护人造成困惑。另外对于没有被使用到的代码，我认为也都应该立即删除，从而保持系统的精简，如果将来需要时再去书写或恢复，而且那时侯写出的代码也绝对比之前的更为契合。</font></td></tr></tbody></table><h3 id="6-Boy-Scout-Rule"><a href="#6-Boy-Scout-Rule" class="headerlink" title="6. Boy-Scout Rule"></a>6. Boy-Scout Rule</h3><p>Boy-Scout Rule，译为：<strong>童子军规则</strong>。美国童子军有一个简单的规则：“让营地比你刚来时更干净(Always leave the campground cleaner than you found it)”。如果看到地上有垃圾，不管是谁扔的，都要清理。这样你就有意地为下一批来宿营的人改善了环境。</p><p>童子军规则告诉我们在对现有代码库进行更改时，代码质量往往会降低，从而积累技术债务。所以需要始终保持代码整洁。不管原作者是谁，如果我们努力去改进代码模块，不管是多么小的改进，我们的软件系统就再也不会持续变坏了。取而代之的是，系统在发展的同时会逐渐变得更好。我们也会看到团队们关心整体的系统，而不是各自只关心自己负责的一小部分。而且团队成员要互助，互相清理代码，他们遵从童子军规则，因为那对每个人都很好，而不仅仅是对自己好。</p><p>关于童子军规则中所提倡的<strong>对代码坏味道的尽早修复</strong>，我也想起来了我们所熟知的<strong>“破窗效应</strong>”和<strong>“讳疾忌医”</strong>的典故：</p><h3 id="破窗效应"><a href="#破窗效应" class="headerlink" title="破窗效应"></a>破窗效应</h3><table><tbody><tr><td bgcolor="lightblue"><font color="black">如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些示范性的纵容去打烂更多的窗户。久而久之，这些破窗户就给人造成一种无序的感觉，结果在这种公众麻木不仁的氛围中，犯罪就会滋生、猖獗。——政治学家威尔逊和犯罪学家凯琳提出的“破窗效应”理论</font></td></tr></tbody></table><ul><li>“环境早就脏了，我扔的这点儿垃圾根本起不到关键性作用。”</li><li>“这个代码以前的其他人也都是这样写的。”</li><li>“反正也不是只有我才这么写代码的。”</li></ul><p>不少人会像上面这样辩解自己的过错。其实，这些说法根本站不住脚，错了就是错了，影响的大小并不能改变行为错误的本质，别人的错误更不会是证明你无错的理由。任何一种不良现象的存在，都有可能传递一种错误信息。进而导致更坏的后果，正所谓“<strong>千里之堤，溃于蚁穴”、勿以善小而不为，勿以恶小而为之</strong>。</p><h3 id="讳疾忌医的典故"><a href="#讳疾忌医的典故" class="headerlink" title="讳疾忌医的典故"></a>讳疾忌医的典故</h3><p>《扁鹊见蔡桓公》的故事，我们从小就学习了，告诉我们不能盲目相信自己，不能讳疾忌医。但想想我们自己代码的坏味道和bug，也是如出一辙。</p><p>代码坏味道或者糟糕的程序代码就像隐形的“疾病”一样潜伏在项目中，也因此形成了技术债务。如果这些“疾病”在项目初期不引起注关注、不把疾病扼杀在萌芽之中，那么后期修复它的代价也就越大，也必然会使得项目的软件程序越来越难以维护，这个项目也最终会像蔡桓公一样无药可治、“无奈何也”。</p><table><tbody><tr><td bgcolor="lightblue"><font color="black">所以，请记住童子军规则对我们的启示：**始终保持代码整洁，勿以善小而不为，勿以恶小而为之，有病早治**。</font></td></tr></tbody></table><h3 id="其他原则："><a href="#其他原则：" class="headerlink" title="其他原则："></a>其他原则：</h3><ul><li>避免过早优化（Avoid Premature Optimization）: 除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。“过早的优化是一切罪恶之源。”——Donald Knuth</li><li>最小惊讶原则(Principle of least astonishment): 代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。</li><li>代码重用原则（Code Reuse is Good）: 重用代码能提高代码的可读性，缩短开发时间。</li><li>别让我思考(Don’t Make Me Think): 所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。</li><li>为维护者写代码(Write Code for the Maintainer): 优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。“如果一个维护者不再继续维护你的代码，很可能他就有了想杀你的冲动。”</li><li>正交原则(Orthogonality): 正交性的基本思想是，在概念上不相关的事物不应该与系统相关。设计越正交，异常越少。 这使得用编程语言更容易学习，读写程序。(反例：CSS)。</li><li>做最简单的事儿就让代码可运行（Do the simplest thing that could possibly work）: 尽可能做最简单的事就可以让代码可运行。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。</li><li>隐藏实现细节（Hide Implementation Details）: 软件模块通过提供接口隐藏信息（即实现细节），而不泄漏任何不必要的信息。</li><li>科里定律(Curly’s Law): 是为任何特定的代码选择一个明确定义的目标：只做一件事。</li><li>墨菲定律（Murphy’s Law）:根本内容是：如果事情有变坏的可能，不管这种可能性有多小，它总会发生。主要内容如下：<br>&nbsp;&nbsp; - 任何事都没有表面看起来那么简单；<br>&nbsp;&nbsp; - 所有的事都会比你预计的时间长；<br>&nbsp;&nbsp; - 会出错的事总会出错；<br>&nbsp;&nbsp; - 如果你担心某种情况发生，那么它就更有可能发生。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
